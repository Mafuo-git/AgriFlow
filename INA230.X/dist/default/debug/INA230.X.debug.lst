

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Jun 14 15:23:08 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35   000000                     
    36                           ; Generated 21/07/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F46K22 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000000                     
    71                           	psect	idataCOMRAM
    72   0015D8                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for main@F6555
    76   0015D8  DF                 	db	223
    77   0015D9  00                 	db	0
    78   000000                     _SSP1STATbits	set	4039
    79   000000                     _SSP1ADD	set	4040
    80   000000                     _LATD	set	3980
    81   000000                     _SSP1CON2bits	set	4037
    82   000000                     _SSP1STAT	set	4039
    83   000000                     _ANSELCbits	set	3898
    84   000000                     _TRISCbits	set	3988
    85   000000                     _TRISDbits	set	3989
    86   000000                     _PIR1bits	set	3998
    87   000000                     _SSP1CON1	set	4038
    88   000000                     _PORTD	set	3971
    89   000000                     _LATDbits	set	3980
    90   000000                     _SSP1BUF	set	4041
    91   000000                     _SSP1CON3bits	set	4043
    92   000000                     _PIR2bits	set	4001
    93   000000                     _SSP1CON2	set	4037
    94                           
    95                           	psect	smallconst
    96   001000                     __psmallconst:
    97                           	callstack 0
    98   001000  00                 	db	0
    99   001001                     STR_1:
   100   001001  30                 	db	48	;'0'
   101   001002  31                 	db	49	;'1'
   102   001003  32                 	db	50	;'2'
   103   001004  33                 	db	51	;'3'
   104   001005  34                 	db	52	;'4'
   105   001006  35                 	db	53	;'5'
   106   001007  36                 	db	54	;'6'
   107   001008  37                 	db	55	;'7'
   108   001009  38                 	db	56	;'8'
   109   00100A  39                 	db	57	;'9'
   110   00100B  41                 	db	65	;'A'
   111   00100C  42                 	db	66	;'B'
   112   00100D  43                 	db	67	;'C'
   113   00100E  44                 	db	68	;'D'
   114   00100F  45                 	db	69	;'E'
   115   001010  46                 	db	70	;'F'
   116   001011  00                 	db	0
   117   001012                     STR_4:
   118   001012  50                 	db	80	;'P'
   119   001013  61                 	db	97	;'a'
   120   001014  75                 	db	117	;'u'
   121   001015  73                 	db	115	;'s'
   122   001016  65                 	db	101	;'e'
   123   001017  20                 	db	32
   124   001018  20                 	db	32
   125   001019  20                 	db	32
   126   00101A  20                 	db	32
   127   00101B  20                 	db	32
   128   00101C  00                 	db	0
   129   00101D                     STR_3:
   130   00101D  43                 	db	67	;'C'
   131   00101E  6F                 	db	111	;'o'
   132   00101F  6E                 	db	110	;'n'
   133   001020  76                 	db	118	;'v'
   134   001021  65                 	db	101	;'e'
   135   001022  72                 	db	114	;'r'
   136   001023  73                 	db	115	;'s'
   137   001024  69                 	db	105	;'i'
   138   001025  6F                 	db	111	;'o'
   139   001026  6E                 	db	110	;'n'
   140   001027  00                 	db	0
   141   001028                     STR_2:
   142   001028  57                 	db	87	;'W'
   143   001029  61                 	db	97	;'a'
   144   00102A  74                 	db	116	;'t'
   145   00102B  74                 	db	116	;'t'
   146   00102C  20                 	db	32
   147   00102D  3D                 	db	61	;'='
   148   00102E  20                 	db	32
   149   00102F  20                 	db	32
   150   001030  20                 	db	32
   151   001031  00                 	db	0
   152   001032  00                 	db	0	; dummy byte at the end
   153   000000                     
   154                           ; #config settings
   155                           
   156                           	psect	cinit
   157   0014A2                     __pcinit:
   158                           	callstack 0
   159   0014A2                     start_initialization:
   160                           	callstack 0
   161   0014A2                     __initialization:
   162                           	callstack 0
   163                           
   164                           ; Initialize objects allocated to COMRAM (2 bytes)
   165                           ; load TBLPTR registers with __pidataCOMRAM
   166   0014A2  0ED8               	movlw	low __pidataCOMRAM
   167   0014A4  6EF6               	movwf	tblptrl,c
   168   0014A6  0E15               	movlw	high __pidataCOMRAM
   169   0014A8  6EF7               	movwf	tblptrh,c
   170   0014AA  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   171   0014AC  6EF8               	movwf	tblptru,c
   172   0014AE  0009               	tblrd		*+	;fetch initializer
   173   0014B0  CFF5 F02F          	movff	tablat,__pdataCOMRAM
   174   0014B4  0009               	tblrd		*+	;fetch initializer
   175   0014B6  CFF5 F030          	movff	tablat,__pdataCOMRAM+1
   176   0014BA                     end_of_initialization:
   177                           	callstack 0
   178   0014BA                     __end_of__initialization:
   179                           	callstack 0
   180   0014BA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181   0014BC  6EF8               	movwf	tblptru,c
   182   0014BE  0100               	movlb	0
   183   0014C0  EF1A  F008         	goto	_main	;jump to C main() function
   184                           
   185                           	psect	dataCOMRAM
   186   00002F                     __pdataCOMRAM:
   187                           	callstack 0
   188   00002F                     main@F6555:
   189                           	callstack 0
   190   00002F                     	ds	2
   191                           
   192                           	psect	cstackCOMRAM
   193   000001                     __pcstackCOMRAM:
   194                           	callstack 0
   195   000001                     ??_i2c_waitForIdle:
   196   000001                     ReadByte@status:
   197                           	callstack 0
   198   000001                     WriteNibble@data:
   199                           	callstack 0
   200   000001                     strcpy@dest:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x0
   204   000001                     	ds	1
   205   000002                     ??_WriteNibble:
   206   000002                     i2c_read@i2cReadData:
   207                           	callstack 0
   208   000002                     i2c_write@i2cWriteData:
   209                           	callstack 0
   210   000002                     WaitLCD@status:
   211                           	callstack 0
   212   000002                     strcpy@src:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x1
   216   000002                     	ds	1
   217   000003                     ??_strcpy:
   218   000003                     WriteNibble@cmd:
   219                           	callstack 0
   220   000003                     I2C_Write_Register@value:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0x2
   224   000003                     	ds	1
   225   000004                     ??_LCDInit:
   226   000004                     WriteByte@data:
   227                           	callstack 0
   228   000004                     strcpy@d:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232   000004                     	ds	1
   233   000005                     WriteByte@cmd:
   234                           	callstack 0
   235   000005                     I2C_Write_Register@reg:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x4
   239   000005                     	ds	1
   240   000006                     ??_LCDClear:
   241   000006                     LCDGoto@row:
   242                           	callstack 0
   243   000006                     LCDPutChar@data:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0x5
   247   000006                     	ds	1
   248   000007                     ??_LCDGoto:
   249   000007                     LCDWriteStr@string:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x6
   253   000007                     	ds	2
   254   000009                     ??_LCDWriteStr:
   255   000009                     _LCDGoto$623:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x8
   259   000009                     	ds	2
   260   00000B                     LCDGoto@column:
   261                           	callstack 0
   262   00000B                     LCDWriteStr@i:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0xA
   266   00000B                     	ds	1
   267   00000C                     LCDWriteHexa@row:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0xB
   271   00000C                     	ds	1
   272   00000D                     LCDWriteHexa@value:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0xC
   276   00000D                     	ds	1
   277   00000E                     ??_LCDWriteHexa:
   278                           
   279                           ; 1 bytes @ 0xD
   280   00000E                     	ds	2
   281   000010                     LCDWriteHexa@column:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0xF
   285   000010                     	ds	1
   286   000011                     LCDWriteHexa@string:
   287                           	callstack 0
   288                           
   289                           ; 3 bytes @ 0x10
   290   000011                     	ds	3
   291   000014                     LCDWriteHexa@hexa:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0x13
   295   000014                     	ds	1
   296   000015                     
   297                           ; 2 bytes @ 0x14
   298   000015                     	ds	2
   299   000017                     
   300                           ; 3 bytes @ 0x16
   301   000017                     	ds	3
   302   00001A                     ??_main:
   303                           
   304                           ; 1 bytes @ 0x19
   305   00001A                     	ds	1
   306   00001B                     main@string:
   307                           	callstack 0
   308                           
   309                           ; 16 bytes @ 0x1A
   310   00001B                     	ds	16
   311   00002B                     main@degre:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x2A
   315   00002B                     	ds	2
   316   00002D                     main@temp:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x2C
   320   00002D                     	ds	1
   321   00002E                     main@temp2:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x2D
   325   00002E                     	ds	1
   326                           
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 91 in file "mesure_temp.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  argc            2   20[COMRAM] int 
   335 ;;  argv            3   22[COMRAM] PTR PTR unsigned char 
   336 ;; Auto vars:     Size  Location     Type
   337 ;;  string         16   26[COMRAM] unsigned char [16]
   338 ;;  degre           2   42[COMRAM] unsigned char [2]
   339 ;;  temp2           1   45[COMRAM] unsigned char 
   340 ;;  temp            1   44[COMRAM] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2   20[COMRAM] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   350 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   351 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;Total ram usage:       26 bytes
   355 ;; Hardware stack levels required when called: 5
   356 ;; This function calls:
   357 ;;		_I2C_Write_Register
   358 ;;		_LCDClear
   359 ;;		_LCDGoto
   360 ;;		_LCDInit
   361 ;;		_LCDWriteHexa
   362 ;;		_LCDWriteStr
   363 ;;		_i2c_ACK
   364 ;;		_i2c_NAK
   365 ;;		_i2c_init
   366 ;;		_i2c_read
   367 ;;		_i2c_repStart
   368 ;;		_i2c_start
   369 ;;		_i2c_stop
   370 ;;		_i2c_write
   371 ;;		_strcpy
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text0
   378   001034                     __ptext0:
   379                           	callstack 0
   380   001034                     _main:
   381                           	callstack 26
   382   001034  C02F  F02B         	movff	main@F6555,main@degre
   383   001038  C030  F02C         	movff	main@F6555+1,main@degre+1
   384   00103C  ECA0  F008         	call	_LCDInit	;wreg free
   385   001040  EC72  F00A         	call	_LCDClear	;wreg free
   386   001044  ECDA  F009         	call	_i2c_init	;wreg free
   387   001048  0E06               	movlw	6
   388   00104A  6E04               	movwf	(I2C_Write_Register@value+1)^0,c
   389   00104C  0E97               	movlw	151
   390   00104E  6E03               	movwf	I2C_Write_Register@value^0,c
   391   001050  0E05               	movlw	5
   392   001052  EC3F  F00A         	call	_I2C_Write_Register
   393   001056  0E11               	movlw	17
   394   001058  6E1A               	movwf	??_main^0,c
   395   00105A  0E3A               	movlw	58
   396   00105C                     u327:
   397   00105C  2EE8               	decfsz	wreg,f,c
   398   00105E  D7FE               	bra	u327
   399   001060  2E1A               	decfsz	??_main^0,f,c
   400   001062  D7FC               	bra	u327
   401   001064  D000               	nop2	
   402   001066  0E00               	movlw	0
   403   001068  6E06               	movwf	LCDGoto@row^0,c
   404   00106A  0E00               	movlw	0
   405   00106C  EC52  F009         	call	_LCDGoto
   406   001070  0E1B               	movlw	low main@string
   407   001072  6E01               	movwf	strcpy@dest^0,c
   408   001074  0E28               	movlw	low STR_2
   409   001076  6E02               	movwf	strcpy@src^0,c
   410   001078  ECF8  F009         	call	_strcpy	;wreg free
   411   00107C  0E1B               	movlw	low main@string
   412   00107E  6E07               	movwf	LCDWriteStr@string^0,c
   413   001080  6A08               	clrf	(LCDWriteStr@string+1)^0,c
   414   001082  EC14  F009         	call	_LCDWriteStr	;wreg free
   415   001086                     l1389:
   416   001086  0E01               	movlw	1
   417   001088  6E06               	movwf	LCDGoto@row^0,c
   418   00108A  0E00               	movlw	0
   419   00108C  EC52  F009         	call	_LCDGoto
   420   001090  0E1D               	movlw	low STR_3
   421   001092  6E07               	movwf	LCDWriteStr@string^0,c
   422   001094  5007               	movf	LCDWriteStr@string^0,w,c
   423   001096  A4D8               	btfss	status,2,c
   424   001098  0E10               	movlw	high __smallconst
   425   00109A  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   426   00109C  EC14  F009         	call	_LCDWriteStr	;wreg free
   427   0010A0  0EA3               	movlw	163
   428   0010A2  6E1A               	movwf	??_main^0,c
   429   0010A4  0E55               	movlw	85
   430   0010A6                     u337:
   431   0010A6  2EE8               	decfsz	wreg,f,c
   432   0010A8  D7FE               	bra	u337
   433   0010AA  2E1A               	decfsz	??_main^0,f,c
   434   0010AC  D7FC               	bra	u337
   435   0010AE  0000               	nop	
   436   0010B0  ECD9  F00A         	call	_i2c_start	;wreg free
   437   0010B4  0E80               	movlw	128
   438   0010B6  EC90  F00A         	call	_i2c_write
   439   0010BA  0E05               	movlw	5
   440   0010BC  EC90  F00A         	call	_i2c_write
   441   0010C0  ECAB  F00A         	call	_i2c_repStart	;wreg free
   442   0010C4  0E80               	movlw	128
   443   0010C6  EC90  F00A         	call	_i2c_write
   444   0010CA  0E01               	movlw	1
   445   0010CC  EC90  F00A         	call	_i2c_write
   446   0010D0  ECAB  F00A         	call	_i2c_repStart	;wreg free
   447   0010D4  0E81               	movlw	129
   448   0010D6  EC90  F00A         	call	_i2c_write
   449   0010DA  EC62  F00A         	call	_i2c_read	;wreg free
   450   0010DE  6E2D               	movwf	main@temp^0,c
   451   0010E0  ECCE  F00A         	call	_i2c_ACK	;wreg free
   452   0010E4  EC62  F00A         	call	_i2c_read	;wreg free
   453   0010E8  6E2E               	movwf	main@temp2^0,c
   454   0010EA  ECC3  F00A         	call	_i2c_NAK	;wreg free
   455   0010EE  ECB7  F00A         	call	_i2c_stop	;wreg free
   456   0010F2  0E00               	movlw	0
   457   0010F4  6E0C               	movwf	LCDWriteHexa@row^0,c
   458   0010F6  C02D  F00D         	movff	main@temp,LCDWriteHexa@value
   459   0010FA  0E07               	movlw	7
   460   0010FC  EC87  F009         	call	_LCDWriteHexa
   461   001100  0E00               	movlw	0
   462   001102  6E0C               	movwf	LCDWriteHexa@row^0,c
   463   001104  C02E  F00D         	movff	main@temp2,LCDWriteHexa@value
   464   001108  0E0A               	movlw	10
   465   00110A  EC87  F009         	call	_LCDWriteHexa
   466   00110E  0E01               	movlw	1
   467   001110  6E06               	movwf	LCDGoto@row^0,c
   468   001112  0E00               	movlw	0
   469   001114  EC52  F009         	call	_LCDGoto
   470   001118  0E12               	movlw	low STR_4
   471   00111A  6E07               	movwf	LCDWriteStr@string^0,c
   472   00111C  5007               	movf	LCDWriteStr@string^0,w,c
   473   00111E  A4D8               	btfss	status,2,c
   474   001120  0E10               	movlw	high __smallconst
   475   001122  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   476   001124  EC14  F009         	call	_LCDWriteStr	;wreg free
   477   001128  0EA3               	movlw	163
   478   00112A  6E1A               	movwf	??_main^0,c
   479   00112C  0E55               	movlw	85
   480   00112E                     u347:
   481   00112E  2EE8               	decfsz	wreg,f,c
   482   001130  D7FE               	bra	u347
   483   001132  2E1A               	decfsz	??_main^0,f,c
   484   001134  D7FC               	bra	u347
   485   001136  0000               	nop	
   486   001138  EF43  F008         	goto	l1389
   487   00113C  EF00  F000         	goto	start
   488   001140                     __end_of_main:
   489                           	callstack 0
   490                           
   491 ;; *************** function _strcpy *****************
   492 ;; Defined at:
   493 ;;		line 3 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/strcpy.c"
   494 ;; Parameters:    Size  Location     Type
   495 ;;  dest            1    0[COMRAM] PTR unsigned char 
   496 ;;		 -> main@string(16), 
   497 ;;  src             1    1[COMRAM] PTR const unsigned char 
   498 ;;		 -> STR_2(10), 
   499 ;; Auto vars:     Size  Location     Type
   500 ;;  d               1    3[COMRAM] PTR unsigned char 
   501 ;;		 -> main@string(16), 
   502 ;; Return value:  Size  Location     Type
   503 ;;                  1    wreg      PTR unsigned char 
   504 ;; Registers used:
   505 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   506 ;; Tracked objects:
   507 ;;		On entry : 0/0
   508 ;;		On exit  : 0/0
   509 ;;		Unchanged: 0/0
   510 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   511 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   512 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   513 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   514 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   515 ;;Total ram usage:        4 bytes
   516 ;; Hardware stack levels used: 1
   517 ;; This function calls:
   518 ;;		Nothing
   519 ;; This function is called by:
   520 ;;		_main
   521 ;; This function uses a non-reentrant model
   522 ;;
   523                           
   524                           	psect	text1
   525   0013F0                     __ptext1:
   526                           	callstack 0
   527   0013F0                     _strcpy:
   528                           	callstack 30
   529   0013F0  C001  F004         	movff	strcpy@dest,strcpy@d
   530   0013F4                     l1341:
   531   0013F4  2A02               	incf	strcpy@src^0,f,c
   532   0013F6  0402               	decf	strcpy@src^0,w,c
   533   0013F8  6E03               	movwf	??_strcpy^0,c
   534   0013FA  C003  FFF6         	movff	??_strcpy,tblptrl
   535   0013FE                     	if	1	;There is more than 1 active tblptr byte
   536   0013FE  0E10               	movlw	high __smallconst
   537   001400  6EF7               	movwf	tblptrh,c
   538   001402                     	endif
   539   001402                     	if	0	;tblptru may be non-zero
   540   001402                     	endif
   541   001402                     	if	0	;tblptru may be non-zero
   542   001402                     	endif
   543   001402  2A04               	incf	strcpy@d^0,f,c
   544   001404  0404               	decf	strcpy@d^0,w,c
   545   001406  6ED9               	movwf	fsr2l,c
   546   001408  6ADA               	clrf	fsr2h,c
   547   00140A  0008               	tblrd		*
   548   00140C  CFF5 FFDF          	movff	tablat,indf2
   549   001410  50DF               	movf	indf2,w,c
   550   001412  A4D8               	btfss	status,2,c
   551   001414  EF0E  F00A         	goto	u301
   552   001418  EF10  F00A         	goto	u300
   553   00141C                     u301:
   554   00141C  EFFA  F009         	goto	l1341
   555   001420                     u300:
   556   001420  0012               	return		;funcret
   557   001422                     __end_of_strcpy:
   558                           	callstack 0
   559                           
   560 ;; *************** function _i2c_repStart *****************
   561 ;; Defined at:
   562 ;;		line 59 in file "i2c.c"
   563 ;; Parameters:    Size  Location     Type
   564 ;;		None
   565 ;; Auto vars:     Size  Location     Type
   566 ;;		None
   567 ;; Return value:  Size  Location     Type
   568 ;;                  1    wreg      void 
   569 ;; Registers used:
   570 ;;		wreg, status,2, status,0, cstack
   571 ;; Tracked objects:
   572 ;;		On entry : 0/0
   573 ;;		On exit  : 0/0
   574 ;;		Unchanged: 0/0
   575 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   576 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   577 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   578 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   579 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   580 ;;Total ram usage:        0 bytes
   581 ;; Hardware stack levels used: 1
   582 ;; Hardware stack levels required when called: 1
   583 ;; This function calls:
   584 ;;		_i2c_waitForIdle
   585 ;; This function is called by:
   586 ;;		_main
   587 ;; This function uses a non-reentrant model
   588 ;;
   589                           
   590                           	psect	text2
   591   001556                     __ptext2:
   592                           	callstack 0
   593   001556                     _i2c_repStart:
   594                           	callstack 29
   595   001556                     
   596                           ;i2c.c: 61:     i2c_waitForIdle();
   597   001556  EC29  F00A         	call	_i2c_waitForIdle	;wreg free
   598   00155A                     
   599                           ;i2c.c: 63:     PIR1bits.SSP1IF = 0;
   600   00155A  969E               	bcf	158,3,c	;volatile
   601   00155C                     
   602                           ;i2c.c: 64:     SSP1CON2bits.RSEN = 1;
   603   00155C  82C5               	bsf	197,1,c	;volatile
   604   00155E                     l44:
   605   00155E  A69E               	btfss	158,3,c	;volatile
   606   001560  EFB4  F00A         	goto	u151
   607   001564  EFB6  F00A         	goto	u150
   608   001568                     u151:
   609   001568  EFAF  F00A         	goto	l44
   610   00156C                     u150:
   611   00156C  0012               	return		;funcret
   612   00156E                     __end_of_i2c_repStart:
   613                           	callstack 0
   614                           
   615 ;; *************** function _i2c_read *****************
   616 ;; Defined at:
   617 ;;		line 92 in file "i2c.c"
   618 ;; Parameters:    Size  Location     Type
   619 ;;		None
   620 ;; Auto vars:     Size  Location     Type
   621 ;;  i2cReadData     1    1[COMRAM] unsigned char 
   622 ;; Return value:  Size  Location     Type
   623 ;;                  1    wreg      unsigned char 
   624 ;; Registers used:
   625 ;;		wreg, status,2, status,0, cstack
   626 ;; Tracked objects:
   627 ;;		On entry : 0/0
   628 ;;		On exit  : 0/0
   629 ;;		Unchanged: 0/0
   630 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   631 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   632 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   633 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   634 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   635 ;;Total ram usage:        1 bytes
   636 ;; Hardware stack levels used: 1
   637 ;; Hardware stack levels required when called: 1
   638 ;; This function calls:
   639 ;;		_i2c_waitForIdle
   640 ;; This function is called by:
   641 ;;		_main
   642 ;; This function uses a non-reentrant model
   643 ;;
   644                           
   645                           	psect	text3
   646   0014C4                     __ptext3:
   647                           	callstack 0
   648   0014C4                     _i2c_read:
   649                           	callstack 29
   650   0014C4                     
   651                           ;i2c.c: 95:     i2c_waitForIdle();
   652   0014C4  EC29  F00A         	call	_i2c_waitForIdle	;wreg free
   653   0014C8                     
   654                           ;i2c.c: 97:     PIR1bits.SSP1IF = 0;
   655   0014C8  969E               	bcf	158,3,c	;volatile
   656   0014CA                     
   657                           ;i2c.c: 98:     SSP1CON2bits.RCEN = 1;
   658   0014CA  86C5               	bsf	197,3,c	;volatile
   659   0014CC                     l68:
   660   0014CC  A0C7               	btfss	199,0,c	;volatile
   661   0014CE  EF6B  F00A         	goto	u181
   662   0014D2  EF6D  F00A         	goto	u180
   663   0014D6                     u181:
   664   0014D6  EF66  F00A         	goto	l68
   665   0014DA                     u180:
   666   0014DA                     
   667                           ;i2c.c: 101:     PIR1bits.SSP1IF = 0;
   668   0014DA  969E               	bcf	158,3,c	;volatile
   669                           
   670                           ;i2c.c: 102:     i2cReadData = SSP1BUF;
   671   0014DC  CFC9 F002          	movff	4041,i2c_read@i2cReadData	;volatile
   672   0014E0                     
   673                           ;i2c.c: 103:     return i2cReadData;
   674   0014E0  5002               	movf	i2c_read@i2cReadData^0,w,c
   675   0014E2  0012               	return		;funcret
   676   0014E4                     __end_of_i2c_read:
   677                           	callstack 0
   678                           
   679 ;; *************** function _i2c_init *****************
   680 ;; Defined at:
   681 ;;		line 16 in file "i2c.c"
   682 ;; Parameters:    Size  Location     Type
   683 ;;		None
   684 ;; Auto vars:     Size  Location     Type
   685 ;;		None
   686 ;; Return value:  Size  Location     Type
   687 ;;                  1    wreg      void 
   688 ;; Registers used:
   689 ;;		wreg, status,2
   690 ;; Tracked objects:
   691 ;;		On entry : 0/0
   692 ;;		On exit  : 0/0
   693 ;;		Unchanged: 0/0
   694 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   695 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   696 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   697 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   698 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   699 ;;Total ram usage:        0 bytes
   700 ;; Hardware stack levels used: 1
   701 ;; This function calls:
   702 ;;		Nothing
   703 ;; This function is called by:
   704 ;;		_main
   705 ;; This function uses a non-reentrant model
   706 ;;
   707                           
   708                           	psect	text4
   709   0013B4                     __ptext4:
   710                           	callstack 0
   711   0013B4                     _i2c_init:
   712                           	callstack 30
   713   0013B4                     
   714                           ;i2c.c: 18:     TRISCbits.TRISC3 = 1;
   715   0013B4  8694               	bsf	148,3,c	;volatile
   716                           
   717                           ;i2c.c: 19:     TRISCbits.TRISC4 = 1;
   718   0013B6  8894               	bsf	148,4,c	;volatile
   719                           
   720                           ;i2c.c: 20:     ANSELCbits.ANSC3 = 0;
   721   0013B8  010F               	movlb	15	; () banked
   722   0013BA  973A               	bcf	58,3,b	;volatile
   723                           
   724                           ;i2c.c: 21:     ANSELCbits.ANSC4 = 0;
   725   0013BC  993A               	bcf	58,4,b	;volatile
   726   0013BE                     
   727                           ; BSR set to: 15
   728                           ;i2c.c: 23:     SSP1CON1 = 0b00101000;
   729   0013BE  0E28               	movlw	40
   730   0013C0  6EC6               	movwf	198,c	;volatile
   731   0013C2                     
   732                           ; BSR set to: 15
   733                           ;i2c.c: 24:     __nop();
   734   0013C2  0000               	nop	
   735   0013C4                     
   736                           ;i2c.c: 25:     __nop();
   737   0013C4  0000               	nop	
   738   0013C6                     
   739                           ;i2c.c: 26:     __nop();
   740   0013C6  0000               	nop	
   741                           
   742                           ;i2c.c: 28:     SSP1ADD = 4;
   743   0013C8  0E04               	movlw	4
   744   0013CA  6EC8               	movwf	200,c	;volatile
   745   0013CC                     
   746                           ;i2c.c: 29:     __nop();
   747   0013CC  0000               	nop	
   748   0013CE                     
   749                           ;i2c.c: 30:     __nop();
   750   0013CE  0000               	nop	
   751   0013D0                     
   752                           ;i2c.c: 31:     __nop();
   753   0013D0  0000               	nop	
   754   0013D2                     
   755                           ;i2c.c: 32:     SSP1STATbits.SMP = 1;
   756   0013D2  8EC7               	bsf	199,7,c	;volatile
   757   0013D4                     
   758                           ;i2c.c: 33:     SSP1STATbits.CKE = 1;
   759   0013D4  8CC7               	bsf	199,6,c	;volatile
   760   0013D6                     
   761                           ;i2c.c: 34:     SSP1CON3bits.SCIE = 0;
   762   0013D6  9ACB               	bcf	203,5,c	;volatile
   763   0013D8                     
   764                           ;i2c.c: 35:     SSP1CON3bits.PCIE = 0;
   765   0013D8  9CCB               	bcf	203,6,c	;volatile
   766   0013DA                     
   767                           ;i2c.c: 38:     PIR1bits.SSP1IF = 0;
   768   0013DA  969E               	bcf	158,3,c	;volatile
   769   0013DC                     
   770                           ;i2c.c: 39:     PIR2bits.BCL1IF = 0;
   771   0013DC  96A1               	bcf	161,3,c	;volatile
   772                           
   773                           ;i2c.c: 40:     SSP1CON1 = 0b00101000;
   774   0013DE  0E28               	movlw	40
   775   0013E0  6EC6               	movwf	198,c	;volatile
   776                           
   777                           ;i2c.c: 41:     SSP1CON2 = 0;
   778   0013E2  0E00               	movlw	0
   779   0013E4  6EC5               	movwf	197,c	;volatile
   780                           
   781                           ;i2c.c: 42:     SSP1ADD = (1000000UL / (4 * 100000)) - 1;
   782   0013E6  0E01               	movlw	1
   783   0013E8  6EC8               	movwf	200,c	;volatile
   784                           
   785                           ;i2c.c: 43:     SSP1STAT = 0;
   786   0013EA  0E00               	movlw	0
   787   0013EC  6EC7               	movwf	199,c	;volatile
   788   0013EE  0012               	return		;funcret
   789   0013F0                     __end_of_i2c_init:
   790                           	callstack 0
   791                           
   792 ;; *************** function _i2c_NAK *****************
   793 ;; Defined at:
   794 ;;		line 84 in file "i2c.c"
   795 ;; Parameters:    Size  Location     Type
   796 ;;		None
   797 ;; Auto vars:     Size  Location     Type
   798 ;;		None
   799 ;; Return value:  Size  Location     Type
   800 ;;                  1    wreg      void 
   801 ;; Registers used:
   802 ;;		None
   803 ;; Tracked objects:
   804 ;;		On entry : 0/0
   805 ;;		On exit  : 0/0
   806 ;;		Unchanged: 0/0
   807 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   808 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   811 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   812 ;;Total ram usage:        0 bytes
   813 ;; Hardware stack levels used: 1
   814 ;; This function calls:
   815 ;;		Nothing
   816 ;; This function is called by:
   817 ;;		_main
   818 ;; This function uses a non-reentrant model
   819 ;;
   820                           
   821                           	psect	text5
   822   001586                     __ptext5:
   823                           	callstack 0
   824   001586                     _i2c_NAK:
   825                           	callstack 30
   826   001586                     
   827                           ;i2c.c: 86:     PIR1bits.SSP1IF = 0;
   828   001586  969E               	bcf	158,3,c	;volatile
   829                           
   830                           ;i2c.c: 87:     SSP1CON2bits.ACKDT = 1;
   831   001588  8AC5               	bsf	197,5,c	;volatile
   832                           
   833                           ;i2c.c: 88:     SSP1CON2bits.ACKEN = 1;
   834   00158A  88C5               	bsf	197,4,c	;volatile
   835   00158C                     l62:
   836   00158C  A69E               	btfss	158,3,c	;volatile
   837   00158E  EFCB  F00A         	goto	u171
   838   001592  EFCD  F00A         	goto	u170
   839   001596                     u171:
   840   001596  EFC6  F00A         	goto	l62
   841   00159A                     u170:
   842   00159A  0012               	return		;funcret
   843   00159C                     __end_of_i2c_NAK:
   844                           	callstack 0
   845                           
   846 ;; *************** function _i2c_ACK *****************
   847 ;; Defined at:
   848 ;;		line 77 in file "i2c.c"
   849 ;; Parameters:    Size  Location     Type
   850 ;;		None
   851 ;; Auto vars:     Size  Location     Type
   852 ;;		None
   853 ;; Return value:  Size  Location     Type
   854 ;;                  1    wreg      void 
   855 ;; Registers used:
   856 ;;		None
   857 ;; Tracked objects:
   858 ;;		On entry : 0/0
   859 ;;		On exit  : 0/0
   860 ;;		Unchanged: 0/0
   861 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   862 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   863 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   864 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   865 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   866 ;;Total ram usage:        0 bytes
   867 ;; Hardware stack levels used: 1
   868 ;; This function calls:
   869 ;;		Nothing
   870 ;; This function is called by:
   871 ;;		_main
   872 ;; This function uses a non-reentrant model
   873 ;;
   874                           
   875                           	psect	text6
   876   00159C                     __ptext6:
   877                           	callstack 0
   878   00159C                     _i2c_ACK:
   879                           	callstack 30
   880   00159C                     
   881                           ;i2c.c: 79:     PIR1bits.SSP1IF = 0;
   882   00159C  969E               	bcf	158,3,c	;volatile
   883                           
   884                           ;i2c.c: 80:     SSP1CON2bits.ACKDT= 0;
   885   00159E  9AC5               	bcf	197,5,c	;volatile
   886                           
   887                           ;i2c.c: 81:     SSP1CON2bits.ACKEN = 1;
   888   0015A0  88C5               	bsf	197,4,c	;volatile
   889   0015A2                     l56:
   890   0015A2  A69E               	btfss	158,3,c	;volatile
   891   0015A4  EFD6  F00A         	goto	u161
   892   0015A8  EFD8  F00A         	goto	u160
   893   0015AC                     u161:
   894   0015AC  EFD1  F00A         	goto	l56
   895   0015B0                     u160:
   896   0015B0  0012               	return		;funcret
   897   0015B2                     __end_of_i2c_ACK:
   898                           	callstack 0
   899                           
   900 ;; *************** function _LCDWriteHexa *****************
   901 ;; Defined at:
   902 ;;		line 201 in file "lcd.c"
   903 ;; Parameters:    Size  Location     Type
   904 ;;  column          1    wreg     unsigned char 
   905 ;;  row             1   11[COMRAM] unsigned char 
   906 ;;  value           1   12[COMRAM] unsigned char 
   907 ;; Auto vars:     Size  Location     Type
   908 ;;  column          1   15[COMRAM] unsigned char 
   909 ;;  string          3   16[COMRAM] unsigned char [3]
   910 ;;  hexa            1   19[COMRAM] PTR unsigned char 
   911 ;;		 -> STR_1(17), 
   912 ;; Return value:  Size  Location     Type
   913 ;;                  1    wreg      void 
   914 ;; Registers used:
   915 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   916 ;; Tracked objects:
   917 ;;		On entry : 0/0
   918 ;;		On exit  : 0/0
   919 ;;		Unchanged: 0/0
   920 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   921 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   922 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   923 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   924 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   925 ;;Total ram usage:        9 bytes
   926 ;; Hardware stack levels used: 1
   927 ;; Hardware stack levels required when called: 4
   928 ;; This function calls:
   929 ;;		_LCDGoto
   930 ;;		_LCDWriteStr
   931 ;; This function is called by:
   932 ;;		_main
   933 ;; This function uses a non-reentrant model
   934 ;;
   935                           
   936                           	psect	text7
   937   00130E                     __ptext7:
   938                           	callstack 0
   939   00130E                     _LCDWriteHexa:
   940                           	callstack 26
   941                           
   942                           ;incstack = 0
   943                           ;LCDWriteHexa@column stored from wreg
   944   00130E  6E10               	movwf	LCDWriteHexa@column^0,c
   945   001310                     
   946                           ;lcd.c: 202:     char *hexa = "0123456789ABCDEF";
   947   001310  0E01               	movlw	low STR_1
   948   001312  6E14               	movwf	LCDWriteHexa@hexa^0,c
   949   001314                     
   950                           ;lcd.c: 203:     char string [3];;lcd.c: 205:     string[0] = hexa[value >> 4];
   951   001314  C00D  F00E         	movff	LCDWriteHexa@value,??_LCDWriteHexa
   952   001318  3A0E               	swapf	??_LCDWriteHexa^0,f,c
   953   00131A  0E0F               	movlw	15
   954   00131C  160E               	andwf	??_LCDWriteHexa^0,f,c
   955   00131E  5014               	movf	LCDWriteHexa@hexa^0,w,c
   956   001320  240E               	addwf	??_LCDWriteHexa^0,w,c
   957   001322  6E0F               	movwf	(??_LCDWriteHexa+1)^0,c
   958   001324  C00F  FFF6         	movff	??_LCDWriteHexa+1,tblptrl
   959   001328                     	if	1	;There is more than 1 active tblptr byte
   960   001328  0E10               	movlw	high __smallconst
   961   00132A  6EF7               	movwf	tblptrh,c
   962   00132C                     	endif
   963   00132C                     	if	0	;tblptru may be non-zero
   964   00132C                     	endif
   965   00132C                     	if	0	;tblptru may be non-zero
   966   00132C                     	endif
   967   00132C  0008               	tblrd		*
   968   00132E  CFF5 F011          	movff	tablat,LCDWriteHexa@string
   969   001332                     
   970                           ;lcd.c: 206:     string[1] = hexa[value & 0x0F];
   971   001332  C00D  F00E         	movff	LCDWriteHexa@value,??_LCDWriteHexa
   972   001336  0E0F               	movlw	15
   973   001338  160E               	andwf	??_LCDWriteHexa^0,f,c
   974   00133A  5014               	movf	LCDWriteHexa@hexa^0,w,c
   975   00133C  240E               	addwf	??_LCDWriteHexa^0,w,c
   976   00133E  6E0F               	movwf	(??_LCDWriteHexa+1)^0,c
   977   001340  C00F  FFF6         	movff	??_LCDWriteHexa+1,tblptrl
   978   001344                     	if	1	;There is more than 1 active tblptr byte
   979   001344  0E10               	movlw	high __smallconst
   980   001346  6EF7               	movwf	tblptrh,c
   981   001348                     	endif
   982   001348                     	if	0	;tblptru may be non-zero
   983   001348                     	endif
   984   001348                     	if	0	;tblptru may be non-zero
   985   001348                     	endif
   986   001348  0008               	tblrd		*
   987   00134A  CFF5 F012          	movff	tablat,LCDWriteHexa@string+1
   988   00134E                     
   989                           ;lcd.c: 207:     string[2] = '\0';
   990   00134E  0E00               	movlw	0
   991   001350  6E13               	movwf	(LCDWriteHexa@string+2)^0,c
   992   001352                     
   993                           ;lcd.c: 209:     LCDGoto(column, row);
   994   001352  C00C  F006         	movff	LCDWriteHexa@row,LCDGoto@row
   995   001356  5010               	movf	LCDWriteHexa@column^0,w,c
   996   001358  EC52  F009         	call	_LCDGoto
   997   00135C                     
   998                           ;lcd.c: 210:     LCDWriteStr(string);
   999   00135C  0E11               	movlw	low LCDWriteHexa@string
  1000   00135E  6E07               	movwf	LCDWriteStr@string^0,c
  1001   001360  6A08               	clrf	(LCDWriteStr@string+1)^0,c
  1002   001362  EC14  F009         	call	_LCDWriteStr	;wreg free
  1003   001366  0012               	return		;funcret
  1004   001368                     __end_of_LCDWriteHexa:
  1005                           	callstack 0
  1006                           
  1007 ;; *************** function _LCDWriteStr *****************
  1008 ;; Defined at:
  1009 ;;		line 193 in file "lcd.c"
  1010 ;; Parameters:    Size  Location     Type
  1011 ;;  string          2    6[COMRAM] PTR const unsigned char 
  1012 ;;		 -> STR_4(11), STR_3(11), main@string(16), LCDWriteInt@string(3), 
  1013 ;;		 -> LCDWriteFloat@string(5), LCDWriteHexa@string(3), 
  1014 ;; Auto vars:     Size  Location     Type
  1015 ;;  i               1   10[COMRAM] unsigned char 
  1016 ;; Return value:  Size  Location     Type
  1017 ;;                  1    wreg      void 
  1018 ;; Registers used:
  1019 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1020 ;; Tracked objects:
  1021 ;;		On entry : 0/0
  1022 ;;		On exit  : 0/0
  1023 ;;		Unchanged: 0/0
  1024 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1025 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1026 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1027 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1028 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1029 ;;Total ram usage:        5 bytes
  1030 ;; Hardware stack levels used: 1
  1031 ;; Hardware stack levels required when called: 3
  1032 ;; This function calls:
  1033 ;;		_LCDPutChar
  1034 ;; This function is called by:
  1035 ;;		_LCDWriteHexa
  1036 ;;		_main
  1037 ;;		_LCDWriteFloat
  1038 ;;		_LCDWriteInt
  1039 ;; This function uses a non-reentrant model
  1040 ;;
  1041                           
  1042                           	psect	text8
  1043   001228                     __ptext8:
  1044                           	callstack 0
  1045   001228                     _LCDWriteStr:
  1046                           	callstack 27
  1047   001228                     
  1048                           ;lcd.c: 193: void LCDWriteStr(const char *string);lcd.c: 194: {;lcd.c: 195:   UINT8_T i 
      +                          = 0;
  1049   001228  0E00               	movlw	0
  1050   00122A  6E0B               	movwf	LCDWriteStr@i^0,c
  1051                           
  1052                           ;lcd.c: 197:   while (string[i])
  1053   00122C  EF32  F009         	goto	l1261
  1054   001230                     l1257:
  1055                           
  1056                           ;lcd.c: 198:     LCDPutChar(string[i++]);
  1057   001230  500B               	movf	LCDWriteStr@i^0,w,c
  1058   001232  2407               	addwf	LCDWriteStr@string^0,w,c
  1059   001234  6E09               	movwf	??_LCDWriteStr^0,c
  1060   001236  0E00               	movlw	0
  1061   001238  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1062   00123A  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1063   00123C  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1064   001240  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1065   001244  0E00               	movlw	low (__smallconst shr (0+16))
  1066   001246  6EF8               	movwf	tblptru,c
  1067   001248  0E0F               	movlw	(high __ramtop+-1)
  1068   00124A  64F7               	cpfsgt	tblptrh,c
  1069   00124C  D003               	bra	u277
  1070   00124E  0008               	tblrd		*
  1071   001250  50F5               	movf	tablat,w,c
  1072   001252  D005               	bra	u270
  1073   001254                     u277:
  1074   001254  CFF6 FFE9          	movff	tblptrl,fsr0l
  1075   001258  CFF7 FFEA          	movff	tblptrh,fsr0h
  1076   00125C  50EF               	movf	indf0,w,c
  1077   00125E                     u270:
  1078   00125E  ECE3  F00A         	call	_LCDPutChar
  1079   001262  2A0B               	incf	LCDWriteStr@i^0,f,c
  1080   001264                     l1261:
  1081                           
  1082                           ;lcd.c: 197:   while (string[i])
  1083   001264  500B               	movf	LCDWriteStr@i^0,w,c
  1084   001266  2407               	addwf	LCDWriteStr@string^0,w,c
  1085   001268  6E09               	movwf	??_LCDWriteStr^0,c
  1086   00126A  0E00               	movlw	0
  1087   00126C  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1088   00126E  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1089   001270  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1090   001274  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1091   001278  0E00               	movlw	low (__smallconst shr (0+16))
  1092   00127A  6EF8               	movwf	tblptru,c
  1093   00127C  0E0F               	movlw	(high __ramtop+-1)
  1094   00127E  64F7               	cpfsgt	tblptrh,c
  1095   001280  D003               	bra	u287
  1096   001282  0008               	tblrd		*
  1097   001284  50F5               	movf	tablat,w,c
  1098   001286  D005               	bra	u280
  1099   001288                     u287:
  1100   001288  CFF6 FFE9          	movff	tblptrl,fsr0l
  1101   00128C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1102   001290  50EF               	movf	indf0,w,c
  1103   001292                     u280:
  1104   001292  0900               	iorlw	0
  1105   001294  A4D8               	btfss	status,2,c
  1106   001296  EF4F  F009         	goto	u291
  1107   00129A  EF51  F009         	goto	u290
  1108   00129E                     u291:
  1109   00129E  EF18  F009         	goto	l1257
  1110   0012A2                     u290:
  1111   0012A2  0012               	return		;funcret
  1112   0012A4                     __end_of_LCDWriteStr:
  1113                           	callstack 0
  1114                           
  1115 ;; *************** function _LCDPutChar *****************
  1116 ;; Defined at:
  1117 ;;		line 181 in file "lcd.c"
  1118 ;; Parameters:    Size  Location     Type
  1119 ;;  data            1    wreg     unsigned char 
  1120 ;; Auto vars:     Size  Location     Type
  1121 ;;  data            1    5[COMRAM] unsigned char 
  1122 ;; Return value:  Size  Location     Type
  1123 ;;                  1    wreg      void 
  1124 ;; Registers used:
  1125 ;;		wreg, status,2, status,0, cstack
  1126 ;; Tracked objects:
  1127 ;;		On entry : 0/0
  1128 ;;		On exit  : 0/0
  1129 ;;		Unchanged: 0/0
  1130 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1131 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1132 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1133 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1134 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1135 ;;Total ram usage:        1 bytes
  1136 ;; Hardware stack levels used: 1
  1137 ;; Hardware stack levels required when called: 2
  1138 ;; This function calls:
  1139 ;;		_WaitLCD
  1140 ;;		_WriteByte
  1141 ;; This function is called by:
  1142 ;;		_LCDWriteStr
  1143 ;;		_LCDPutByte
  1144 ;; This function uses a non-reentrant model
  1145 ;;
  1146                           
  1147                           	psect	text9
  1148   0015C6                     __ptext9:
  1149                           	callstack 0
  1150   0015C6                     _LCDPutChar:
  1151                           	callstack 27
  1152                           
  1153                           ;incstack = 0
  1154                           ;LCDPutChar@data stored from wreg
  1155   0015C6  6E06               	movwf	LCDPutChar@data^0,c
  1156   0015C8                     
  1157                           ;lcd.c: 181: void LCDPutChar(UINT8_T data);lcd.c: 182: {;lcd.c: 183:     WriteByte(0, da
      +                          ta);
  1158   0015C8  C006  F004         	movff	LCDPutChar@data,WriteByte@data
  1159   0015CC  0E00               	movlw	0
  1160   0015CE  EC9E  F00A         	call	_WriteByte
  1161                           
  1162                           ;lcd.c: 184:     WaitLCD();
  1163   0015D2  EC82  F00A         	call	_WaitLCD	;wreg free
  1164   0015D6  0012               	return		;funcret
  1165   0015D8                     __end_of_LCDPutChar:
  1166                           	callstack 0
  1167                           
  1168 ;; *************** function _LCDGoto *****************
  1169 ;; Defined at:
  1170 ;;		line 172 in file "lcd.c"
  1171 ;; Parameters:    Size  Location     Type
  1172 ;;  column          1    wreg     unsigned char 
  1173 ;;  row             1    5[COMRAM] unsigned char 
  1174 ;; Auto vars:     Size  Location     Type
  1175 ;;  column          1   10[COMRAM] unsigned char 
  1176 ;; Return value:  Size  Location     Type
  1177 ;;                  1    wreg      void 
  1178 ;; Registers used:
  1179 ;;		wreg, status,2, status,0, cstack
  1180 ;; Tracked objects:
  1181 ;;		On entry : 0/0
  1182 ;;		On exit  : 0/0
  1183 ;;		Unchanged: 0/0
  1184 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1185 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1186 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1187 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1188 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1189 ;;Total ram usage:        6 bytes
  1190 ;; Hardware stack levels used: 1
  1191 ;; Hardware stack levels required when called: 2
  1192 ;; This function calls:
  1193 ;;		_WaitLCD
  1194 ;;		_WriteByte
  1195 ;; This function is called by:
  1196 ;;		_LCDWriteHexa
  1197 ;;		_main
  1198 ;;		_LCDWriteFloat
  1199 ;;		_LCDWriteInt
  1200 ;; This function uses a non-reentrant model
  1201 ;;
  1202                           
  1203                           	psect	text10
  1204   0012A4                     __ptext10:
  1205                           	callstack 0
  1206   0012A4                     _LCDGoto:
  1207                           	callstack 27
  1208                           
  1209                           ;incstack = 0
  1210                           ;LCDGoto@column stored from wreg
  1211   0012A4  6E0B               	movwf	LCDGoto@column^0,c
  1212   0012A6                     
  1213                           ;lcd.c: 172: void LCDGoto(UINT8_T column, UINT8_T row);lcd.c: 173: {;lcd.c: 174:     if 
      +                          ((row > (2 - 1)) || (column > (16 - 1)))
  1214   0012A6  0E02               	movlw	2
  1215   0012A8  6006               	cpfslt	LCDGoto@row^0,c
  1216   0012AA  EF59  F009         	goto	u241
  1217   0012AE  EF5B  F009         	goto	u240
  1218   0012B2                     u241:
  1219   0012B2  EF86  F009         	goto	l115
  1220   0012B6                     u240:
  1221   0012B6  0E0F               	movlw	15
  1222   0012B8  640B               	cpfsgt	LCDGoto@column^0,c
  1223   0012BA  EF61  F009         	goto	u251
  1224   0012BE  EF63  F009         	goto	u250
  1225   0012C2                     u251:
  1226   0012C2  EF65  F009         	goto	l1245
  1227   0012C6                     u250:
  1228   0012C6  EF86  F009         	goto	l115
  1229   0012CA                     l1245:
  1230                           
  1231                           ;lcd.c: 177:     WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1232   0012CA  0406               	decf	LCDGoto@row^0,w,c
  1233   0012CC  B4D8               	btfsc	status,2,c
  1234   0012CE  EF6B  F009         	goto	u261
  1235   0012D2  EF6D  F009         	goto	u260
  1236   0012D6                     u261:
  1237   0012D6  EF77  F009         	goto	l1249
  1238   0012DA                     u260:
  1239   0012DA  0E80               	movlw	128
  1240   0012DC  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1241   0012E0  6A08               	clrf	(??_LCDGoto+1)^0,c
  1242   0012E2  1007               	iorwf	??_LCDGoto^0,w,c
  1243   0012E4  6E09               	movwf	_LCDGoto$623^0,c
  1244   0012E6  5008               	movf	(??_LCDGoto+1)^0,w,c
  1245   0012E8  6E0A               	movwf	(_LCDGoto$623+1)^0,c
  1246   0012EA  EF7F  F009         	goto	l1251
  1247   0012EE                     l1249:
  1248   0012EE  0EC0               	movlw	192
  1249   0012F0  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1250   0012F4  6A08               	clrf	(??_LCDGoto+1)^0,c
  1251   0012F6  1007               	iorwf	??_LCDGoto^0,w,c
  1252   0012F8  6E09               	movwf	_LCDGoto$623^0,c
  1253   0012FA  5008               	movf	(??_LCDGoto+1)^0,w,c
  1254   0012FC  6E0A               	movwf	(_LCDGoto$623+1)^0,c
  1255   0012FE                     l1251:
  1256   0012FE  C009  F004         	movff	_LCDGoto$623,WriteByte@data
  1257   001302  0E01               	movlw	1
  1258   001304  EC9E  F00A         	call	_WriteByte
  1259   001308                     
  1260                           ;lcd.c: 178:     WaitLCD();
  1261   001308  EC82  F00A         	call	_WaitLCD	;wreg free
  1262   00130C                     l115:
  1263   00130C  0012               	return		;funcret
  1264   00130E                     __end_of_LCDGoto:
  1265                           	callstack 0
  1266                           
  1267 ;; *************** function _LCDInit *****************
  1268 ;; Defined at:
  1269 ;;		line 90 in file "lcd.c"
  1270 ;; Parameters:    Size  Location     Type
  1271 ;;		None
  1272 ;; Auto vars:     Size  Location     Type
  1273 ;;		None
  1274 ;; Return value:  Size  Location     Type
  1275 ;;                  1    wreg      void 
  1276 ;; Registers used:
  1277 ;;		wreg, status,2, status,0, cstack
  1278 ;; Tracked objects:
  1279 ;;		On entry : 0/0
  1280 ;;		On exit  : 0/0
  1281 ;;		Unchanged: 0/0
  1282 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1283 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1284 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1285 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1286 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1287 ;;Total ram usage:        1 bytes
  1288 ;; Hardware stack levels used: 1
  1289 ;; Hardware stack levels required when called: 2
  1290 ;; This function calls:
  1291 ;;		_WaitLCD
  1292 ;;		_WriteNibble
  1293 ;; This function is called by:
  1294 ;;		_main
  1295 ;; This function uses a non-reentrant model
  1296 ;;
  1297                           
  1298                           	psect	text11
  1299   001140                     __ptext11:
  1300                           	callstack 0
  1301   001140                     _LCDInit:
  1302                           	callstack 28
  1303   001140                     
  1304                           ;lcd.c: 92:     TRISDbits.TRISD7 = 0;
  1305   001140  9E95               	bcf	149,7,c	;volatile
  1306                           
  1307                           ;lcd.c: 93:     TRISDbits.TRISD6 = 0;
  1308   001142  9C95               	bcf	149,6,c	;volatile
  1309                           
  1310                           ;lcd.c: 94:     TRISDbits.TRISD5 = 0;
  1311   001144  9A95               	bcf	149,5,c	;volatile
  1312                           
  1313                           ;lcd.c: 95:     TRISDbits.TRISD4 = 0;
  1314   001146  9895               	bcf	149,4,c	;volatile
  1315                           
  1316                           ;lcd.c: 96:     TRISDbits.TRISD0 = 0;
  1317   001148  9095               	bcf	149,0,c	;volatile
  1318                           
  1319                           ;lcd.c: 97:     TRISDbits.TRISD1 = 0;
  1320   00114A  9295               	bcf	149,1,c	;volatile
  1321                           
  1322                           ;lcd.c: 98:     TRISDbits.TRISD2 = 0;
  1323   00114C  9495               	bcf	149,2,c	;volatile
  1324                           
  1325                           ;lcd.c: 99:     TRISDbits.TRISD3 = 0;
  1326   00114E  9695               	bcf	149,3,c	;volatile
  1327                           
  1328                           ;lcd.c: 137:     LATDbits.LATD7 = 1;
  1329   001150  8E8C               	bsf	140,7,c	;volatile
  1330   001152                     
  1331                           ;lcd.c: 138:     _delay(30000);
  1332   001152  0E27               	movlw	39
  1333   001154  6E04               	movwf	??_LCDInit^0,c
  1334   001156  0EF5               	movlw	245
  1335   001158                     u357:
  1336   001158  2EE8               	decfsz	wreg,f,c
  1337   00115A  D7FE               	bra	u357
  1338   00115C  2E04               	decfsz	??_LCDInit^0,f,c
  1339   00115E  D7FC               	bra	u357
  1340   001160  0000               	nop	
  1341   001162                     
  1342                           ;lcd.c: 139:     WriteNibble(1, 0x03);
  1343   001162  0E03               	movlw	3
  1344   001164  6E01               	movwf	WriteNibble@data^0,c
  1345   001166  0E01               	movlw	1
  1346   001168  ECB4  F009         	call	_WriteNibble
  1347   00116C                     
  1348                           ;lcd.c: 140:     _delay(3000);
  1349   00116C  0E04               	movlw	4
  1350   00116E  6E04               	movwf	??_LCDInit^0,c
  1351   001170  0EE4               	movlw	228
  1352   001172                     u367:
  1353   001172  2EE8               	decfsz	wreg,f,c
  1354   001174  D7FE               	bra	u367
  1355   001176  2E04               	decfsz	??_LCDInit^0,f,c
  1356   001178  D7FC               	bra	u367
  1357   00117A  D000               	nop2	
  1358                           
  1359                           ;lcd.c: 141:     WriteNibble(1, 0x03);
  1360   00117C  0E03               	movlw	3
  1361   00117E  6E01               	movwf	WriteNibble@data^0,c
  1362   001180  0E01               	movlw	1
  1363   001182  ECB4  F009         	call	_WriteNibble
  1364   001186                     
  1365                           ;lcd.c: 142:     _delay(100);
  1366   001186  0E21               	movlw	33
  1367   001188                     u377:
  1368   001188  2EE8               	decfsz	wreg,f,c
  1369   00118A  D7FE               	bra	u377
  1370   00118C  0000               	nop	
  1371   00118E                     
  1372                           ;lcd.c: 143:     WriteNibble(1, 0x03);
  1373   00118E  0E03               	movlw	3
  1374   001190  6E01               	movwf	WriteNibble@data^0,c
  1375   001192  0E01               	movlw	1
  1376   001194  ECB4  F009         	call	_WriteNibble
  1377                           
  1378                           ;lcd.c: 144:     _delay(100);
  1379   001198  0E21               	movlw	33
  1380   00119A                     u387:
  1381   00119A  2EE8               	decfsz	wreg,f,c
  1382   00119C  D7FE               	bra	u387
  1383   00119E  0000               	nop	
  1384   0011A0                     
  1385                           ;lcd.c: 145:     WriteNibble(1, 0b00000010);
  1386   0011A0  0E02               	movlw	2
  1387   0011A2  6E01               	movwf	WriteNibble@data^0,c
  1388   0011A4  0E01               	movlw	1
  1389   0011A6  ECB4  F009         	call	_WriteNibble
  1390   0011AA                     
  1391                           ;lcd.c: 146:     WaitLCD();
  1392   0011AA  EC82  F00A         	call	_WaitLCD	;wreg free
  1393   0011AE                     
  1394                           ;lcd.c: 147:     WriteNibble(1, 0b00000010);
  1395   0011AE  0E02               	movlw	2
  1396   0011B0  6E01               	movwf	WriteNibble@data^0,c
  1397   0011B2  0E01               	movlw	1
  1398   0011B4  ECB4  F009         	call	_WriteNibble
  1399   0011B8                     
  1400                           ;lcd.c: 148:     WriteNibble(1, 0b00001000);
  1401   0011B8  0E08               	movlw	8
  1402   0011BA  6E01               	movwf	WriteNibble@data^0,c
  1403   0011BC  0E01               	movlw	1
  1404   0011BE  ECB4  F009         	call	_WriteNibble
  1405   0011C2                     
  1406                           ;lcd.c: 149:     WaitLCD();
  1407   0011C2  EC82  F00A         	call	_WaitLCD	;wreg free
  1408   0011C6                     
  1409                           ;lcd.c: 150:     WriteNibble(1, 0b00000000);
  1410   0011C6  0E00               	movlw	0
  1411   0011C8  6E01               	movwf	WriteNibble@data^0,c
  1412   0011CA  0E01               	movlw	1
  1413   0011CC  ECB4  F009         	call	_WriteNibble
  1414   0011D0                     
  1415                           ;lcd.c: 151:     WriteNibble(1, 0b00001000);
  1416   0011D0  0E08               	movlw	8
  1417   0011D2  6E01               	movwf	WriteNibble@data^0,c
  1418   0011D4  0E01               	movlw	1
  1419   0011D6  ECB4  F009         	call	_WriteNibble
  1420   0011DA                     
  1421                           ;lcd.c: 152:     WaitLCD();
  1422   0011DA  EC82  F00A         	call	_WaitLCD	;wreg free
  1423   0011DE                     
  1424                           ;lcd.c: 153:     WriteNibble(1, 0b00000000);
  1425   0011DE  0E00               	movlw	0
  1426   0011E0  6E01               	movwf	WriteNibble@data^0,c
  1427   0011E2  0E01               	movlw	1
  1428   0011E4  ECB4  F009         	call	_WriteNibble
  1429   0011E8                     
  1430                           ;lcd.c: 154:     WriteNibble(1, 0b00001100);
  1431   0011E8  0E0C               	movlw	12
  1432   0011EA  6E01               	movwf	WriteNibble@data^0,c
  1433   0011EC  0E01               	movlw	1
  1434   0011EE  ECB4  F009         	call	_WriteNibble
  1435   0011F2                     
  1436                           ;lcd.c: 156:     WaitLCD();
  1437   0011F2  EC82  F00A         	call	_WaitLCD	;wreg free
  1438   0011F6                     
  1439                           ;lcd.c: 157:     WriteNibble(1, 0b00000000);
  1440   0011F6  0E00               	movlw	0
  1441   0011F8  6E01               	movwf	WriteNibble@data^0,c
  1442   0011FA  0E01               	movlw	1
  1443   0011FC  ECB4  F009         	call	_WriteNibble
  1444   001200                     
  1445                           ;lcd.c: 158:     WriteNibble(1, 0b00000001);
  1446   001200  0E01               	movlw	1
  1447   001202  6E01               	movwf	WriteNibble@data^0,c
  1448   001204  0E01               	movlw	1
  1449   001206  ECB4  F009         	call	_WriteNibble
  1450   00120A                     
  1451                           ;lcd.c: 159:     WaitLCD();
  1452   00120A  EC82  F00A         	call	_WaitLCD	;wreg free
  1453   00120E                     
  1454                           ;lcd.c: 160:     WriteNibble(1, 0b00000000);
  1455   00120E  0E00               	movlw	0
  1456   001210  6E01               	movwf	WriteNibble@data^0,c
  1457   001212  0E01               	movlw	1
  1458   001214  ECB4  F009         	call	_WriteNibble
  1459   001218                     
  1460                           ;lcd.c: 161:     WriteNibble(1, 0b00000110);
  1461   001218  0E06               	movlw	6
  1462   00121A  6E01               	movwf	WriteNibble@data^0,c
  1463   00121C  0E01               	movlw	1
  1464   00121E  ECB4  F009         	call	_WriteNibble
  1465   001222                     
  1466                           ;lcd.c: 162:     WaitLCD();
  1467   001222  EC82  F00A         	call	_WaitLCD	;wreg free
  1468   001226  0012               	return		;funcret
  1469   001228                     __end_of_LCDInit:
  1470                           	callstack 0
  1471                           
  1472 ;; *************** function _LCDClear *****************
  1473 ;; Defined at:
  1474 ;;		line 165 in file "lcd.c"
  1475 ;; Parameters:    Size  Location     Type
  1476 ;;		None
  1477 ;; Auto vars:     Size  Location     Type
  1478 ;;		None
  1479 ;; Return value:  Size  Location     Type
  1480 ;;                  1    wreg      void 
  1481 ;; Registers used:
  1482 ;;		wreg, status,2, status,0, cstack
  1483 ;; Tracked objects:
  1484 ;;		On entry : 0/0
  1485 ;;		On exit  : 0/0
  1486 ;;		Unchanged: 0/0
  1487 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1488 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1489 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1490 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1491 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1492 ;;Total ram usage:        1 bytes
  1493 ;; Hardware stack levels used: 1
  1494 ;; Hardware stack levels required when called: 2
  1495 ;; This function calls:
  1496 ;;		_WaitLCD
  1497 ;;		_WriteByte
  1498 ;; This function is called by:
  1499 ;;		_main
  1500 ;; This function uses a non-reentrant model
  1501 ;;
  1502                           
  1503                           	psect	text12
  1504   0014E4                     __ptext12:
  1505                           	callstack 0
  1506   0014E4                     _LCDClear:
  1507                           	callstack 28
  1508   0014E4                     
  1509                           ;lcd.c: 167:      WriteByte(1, 0x01);
  1510   0014E4  0E01               	movlw	1
  1511   0014E6  6E04               	movwf	WriteByte@data^0,c
  1512   0014E8  0E01               	movlw	1
  1513   0014EA  EC9E  F00A         	call	_WriteByte
  1514   0014EE                     
  1515                           ;lcd.c: 168:      _delay(12500);
  1516   0014EE  0E11               	movlw	17
  1517   0014F0  6E06               	movwf	??_LCDClear^0,c
  1518   0014F2  0E3A               	movlw	58
  1519   0014F4                     u397:
  1520   0014F4  2EE8               	decfsz	wreg,f,c
  1521   0014F6  D7FE               	bra	u397
  1522   0014F8  2E06               	decfsz	??_LCDClear^0,f,c
  1523   0014FA  D7FC               	bra	u397
  1524   0014FC  D000               	nop2	
  1525   0014FE                     
  1526                           ;lcd.c: 169:      WaitLCD();
  1527   0014FE  EC82  F00A         	call	_WaitLCD	;wreg free
  1528   001502  0012               	return		;funcret
  1529   001504                     __end_of_LCDClear:
  1530                           	callstack 0
  1531                           
  1532 ;; *************** function _WriteByte *****************
  1533 ;; Defined at:
  1534 ;;		line 84 in file "lcd.c"
  1535 ;; Parameters:    Size  Location     Type
  1536 ;;  cmd             1    wreg     unsigned char 
  1537 ;;  data            1    3[COMRAM] unsigned char 
  1538 ;; Auto vars:     Size  Location     Type
  1539 ;;  cmd             1    4[COMRAM] unsigned char 
  1540 ;; Return value:  Size  Location     Type
  1541 ;;                  1    wreg      void 
  1542 ;; Registers used:
  1543 ;;		wreg, status,2, status,0, cstack
  1544 ;; Tracked objects:
  1545 ;;		On entry : 0/0
  1546 ;;		On exit  : 0/0
  1547 ;;		Unchanged: 0/0
  1548 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1549 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1550 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1551 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1552 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1553 ;;Total ram usage:        2 bytes
  1554 ;; Hardware stack levels used: 1
  1555 ;; Hardware stack levels required when called: 1
  1556 ;; This function calls:
  1557 ;;		_WriteNibble
  1558 ;; This function is called by:
  1559 ;;		_LCDClear
  1560 ;;		_LCDGoto
  1561 ;;		_LCDPutChar
  1562 ;;		_LCDShiftDisplay
  1563 ;; This function uses a non-reentrant model
  1564 ;;
  1565                           
  1566                           	psect	text13
  1567   00153C                     __ptext13:
  1568                           	callstack 0
  1569   00153C                     _WriteByte:
  1570                           	callstack 27
  1571                           
  1572                           ;incstack = 0
  1573                           ;WriteByte@cmd stored from wreg
  1574   00153C  6E05               	movwf	WriteByte@cmd^0,c
  1575   00153E                     
  1576                           ;lcd.c: 84: void WriteByte(UINT8_T cmd, UINT8_T data);lcd.c: 85: {;lcd.c: 86:     WriteN
      +                          ibble(cmd, data >> 4);
  1577   00153E  3804               	swapf	WriteByte@data^0,w,c
  1578   001540  0B0F               	andlw	15
  1579   001542  6E01               	movwf	WriteNibble@data^0,c
  1580   001544  5005               	movf	WriteByte@cmd^0,w,c
  1581   001546  ECB4  F009         	call	_WriteNibble
  1582                           
  1583                           ;lcd.c: 87:     WriteNibble(cmd, data);
  1584   00154A  C004  F001         	movff	WriteByte@data,WriteNibble@data
  1585   00154E  5005               	movf	WriteByte@cmd^0,w,c
  1586   001550  ECB4  F009         	call	_WriteNibble
  1587   001554  0012               	return		;funcret
  1588   001556                     __end_of_WriteByte:
  1589                           	callstack 0
  1590                           
  1591 ;; *************** function _WriteNibble *****************
  1592 ;; Defined at:
  1593 ;;		line 67 in file "lcd.c"
  1594 ;; Parameters:    Size  Location     Type
  1595 ;;  cmd             1    wreg     unsigned char 
  1596 ;;  data            1    0[COMRAM] unsigned char 
  1597 ;; Auto vars:     Size  Location     Type
  1598 ;;  cmd             1    2[COMRAM] unsigned char 
  1599 ;; Return value:  Size  Location     Type
  1600 ;;                  1    wreg      void 
  1601 ;; Registers used:
  1602 ;;		wreg, status,2, status,0
  1603 ;; Tracked objects:
  1604 ;;		On entry : 0/0
  1605 ;;		On exit  : 0/0
  1606 ;;		Unchanged: 0/0
  1607 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1608 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1609 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1610 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1611 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1612 ;;Total ram usage:        3 bytes
  1613 ;; Hardware stack levels used: 1
  1614 ;; This function calls:
  1615 ;;		Nothing
  1616 ;; This function is called by:
  1617 ;;		_WriteByte
  1618 ;;		_LCDInit
  1619 ;; This function uses a non-reentrant model
  1620 ;;
  1621                           
  1622                           	psect	text14
  1623   001368                     __ptext14:
  1624                           	callstack 0
  1625   001368                     _WriteNibble:
  1626                           	callstack 27
  1627                           
  1628                           ;incstack = 0
  1629                           ;WriteNibble@cmd stored from wreg
  1630   001368  6E03               	movwf	WriteNibble@cmd^0,c
  1631   00136A                     
  1632                           ;lcd.c: 67: void WriteNibble(UINT8_T cmd, UINT8_T data);lcd.c: 68: {;lcd.c: 69:     LATD
      +                          bits.LATD4 = (cmd ? 0 : 1);
  1633   00136A  5003               	movf	WriteNibble@cmd^0,w,c
  1634   00136C  B4D8               	btfsc	status,2,c
  1635   00136E  EFBB  F009         	goto	u211
  1636   001372  EFBF  F009         	goto	u210
  1637   001376                     u211:
  1638   001376  6A02               	clrf	??_WriteNibble^0,c
  1639   001378  2A02               	incf	??_WriteNibble^0,f,c
  1640   00137A  EFC0  F009         	goto	u228
  1641   00137E                     u210:
  1642   00137E  6A02               	clrf	??_WriteNibble^0,c
  1643   001380                     u228:
  1644   001380  3A02               	swapf	??_WriteNibble^0,f,c
  1645   001382  508C               	movf	140,w,c	;volatile
  1646   001384  1802               	xorwf	??_WriteNibble^0,w,c
  1647   001386  0BEF               	andlw	-17
  1648   001388  1802               	xorwf	??_WriteNibble^0,w,c
  1649   00138A  6E8C               	movwf	140,c	;volatile
  1650   00138C                     
  1651                           ;lcd.c: 70:     LATDbits.LATD5 = 0;
  1652   00138C  9A8C               	bcf	140,5,c	;volatile
  1653   00138E                     
  1654                           ;lcd.c: 71:     LATDbits.LATD6 = 1;
  1655   00138E  8C8C               	bsf	140,6,c	;volatile
  1656   001390                     
  1657                           ;lcd.c: 73:     LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1658   001390  968C               	bcf	140,3,c	;volatile
  1659   001392  948C               	bcf	140,2,c	;volatile
  1660   001394  928C               	bcf	140,1,c	;volatile
  1661   001396  908C               	bcf	140,0,c	;volatile
  1662   001398                     
  1663                           ;lcd.c: 74:     __nop();
  1664   001398  0000               	nop	
  1665   00139A                     
  1666                           ;lcd.c: 75:     __nop();
  1667   00139A  0000               	nop	
  1668                           
  1669                           ;lcd.c: 77:     LATD = (LATD & 0xF0) | (data & 0x0F);
  1670   00139C  C001  F002         	movff	WriteNibble@data,??_WriteNibble
  1671   0013A0  0E0F               	movlw	15
  1672   0013A2  1602               	andwf	??_WriteNibble^0,f,c
  1673   0013A4  508C               	movf	140,w,c	;volatile
  1674   0013A6  0BF0               	andlw	240
  1675   0013A8  1002               	iorwf	??_WriteNibble^0,w,c
  1676   0013AA  6E8C               	movwf	140,c	;volatile
  1677   0013AC                     
  1678                           ;lcd.c: 78:     __nop();
  1679   0013AC  0000               	nop	
  1680   0013AE                     
  1681                           ;lcd.c: 79:     __nop();
  1682   0013AE  0000               	nop	
  1683   0013B0                     
  1684                           ;lcd.c: 81:     LATDbits.LATD6 = 0;
  1685   0013B0  9C8C               	bcf	140,6,c	;volatile
  1686   0013B2  0012               	return		;funcret
  1687   0013B4                     __end_of_WriteNibble:
  1688                           	callstack 0
  1689                           
  1690 ;; *************** function _WaitLCD *****************
  1691 ;; Defined at:
  1692 ;;		line 53 in file "lcd.c"
  1693 ;; Parameters:    Size  Location     Type
  1694 ;;		None
  1695 ;; Auto vars:     Size  Location     Type
  1696 ;;  status          1    1[COMRAM] unsigned char 
  1697 ;; Return value:  Size  Location     Type
  1698 ;;                  1    wreg      void 
  1699 ;; Registers used:
  1700 ;;		wreg, status,2, status,0, cstack
  1701 ;; Tracked objects:
  1702 ;;		On entry : 0/0
  1703 ;;		On exit  : 0/0
  1704 ;;		Unchanged: 0/0
  1705 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1706 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1707 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;Total ram usage:        1 bytes
  1711 ;; Hardware stack levels used: 1
  1712 ;; Hardware stack levels required when called: 1
  1713 ;; This function calls:
  1714 ;;		_ReadByte
  1715 ;; This function is called by:
  1716 ;;		_LCDInit
  1717 ;;		_LCDClear
  1718 ;;		_LCDGoto
  1719 ;;		_LCDPutChar
  1720 ;; This function uses a non-reentrant model
  1721 ;;
  1722                           
  1723                           	psect	text15
  1724   001504                     __ptext15:
  1725                           	callstack 0
  1726   001504                     _WaitLCD:
  1727                           	callstack 27
  1728   001504                     
  1729                           ;lcd.c: 55:     UINT8_T status;;lcd.c: 57:     LATDbits.LATD4 = 0;
  1730   001504  988C               	bcf	140,4,c	;volatile
  1731                           
  1732                           ;lcd.c: 58:     LATDbits.LATD5 = 1;
  1733   001506  8A8C               	bsf	140,5,c	;volatile
  1734   001508                     l1233:
  1735                           
  1736                           ;lcd.c: 61:         status = ReadByte();
  1737   001508  EC11  F00A         	call	_ReadByte	;wreg free
  1738   00150C  6E02               	movwf	WaitLCD@status^0,c
  1739   00150E                     
  1740                           ;lcd.c: 62:     } while (status & 0x80);
  1741   00150E  BE02               	btfsc	WaitLCD@status^0,7,c
  1742   001510  EF8C  F00A         	goto	u231
  1743   001514  EF8E  F00A         	goto	u230
  1744   001518                     u231:
  1745   001518  EF84  F00A         	goto	l1233
  1746   00151C                     u230:
  1747   00151C                     
  1748                           ;lcd.c: 64:     LATDbits.LATD5 = 0;
  1749   00151C  9A8C               	bcf	140,5,c	;volatile
  1750   00151E  0012               	return		;funcret
  1751   001520                     __end_of_WaitLCD:
  1752                           	callstack 0
  1753                           
  1754 ;; *************** function _ReadByte *****************
  1755 ;; Defined at:
  1756 ;;		line 22 in file "lcd.c"
  1757 ;; Parameters:    Size  Location     Type
  1758 ;;		None
  1759 ;; Auto vars:     Size  Location     Type
  1760 ;;  status          1    0[COMRAM] unsigned char 
  1761 ;; Return value:  Size  Location     Type
  1762 ;;                  1    wreg      unsigned char 
  1763 ;; Registers used:
  1764 ;;		wreg, status,2, status,0
  1765 ;; Tracked objects:
  1766 ;;		On entry : 0/0
  1767 ;;		On exit  : 0/0
  1768 ;;		Unchanged: 0/0
  1769 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1770 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1771 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1772 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1773 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1774 ;;Total ram usage:        1 bytes
  1775 ;; Hardware stack levels used: 1
  1776 ;; This function calls:
  1777 ;;		Nothing
  1778 ;; This function is called by:
  1779 ;;		_WaitLCD
  1780 ;; This function uses a non-reentrant model
  1781 ;;
  1782                           
  1783                           	psect	text16
  1784   001422                     __ptext16:
  1785                           	callstack 0
  1786   001422                     _ReadByte:
  1787                           	callstack 27
  1788   001422                     
  1789                           ;lcd.c: 24:     UINT8_T status;;lcd.c: 26:     TRISDbits.TRISD0 = 1;
  1790   001422  8095               	bsf	149,0,c	;volatile
  1791                           
  1792                           ;lcd.c: 27:     TRISDbits.TRISD1 = 1;
  1793   001424  8295               	bsf	149,1,c	;volatile
  1794                           
  1795                           ;lcd.c: 28:     TRISDbits.TRISD2 = 1;
  1796   001426  8495               	bsf	149,2,c	;volatile
  1797                           
  1798                           ;lcd.c: 29:     TRISDbits.TRISD3 = 1;
  1799   001428  8695               	bsf	149,3,c	;volatile
  1800                           
  1801                           ;lcd.c: 31:     LATDbits.LATD6 = 1;
  1802   00142A  8C8C               	bsf	140,6,c	;volatile
  1803                           
  1804                           ;lcd.c: 32:     __nop();
  1805   00142C  0000               	nop	
  1806                           
  1807                           ;lcd.c: 33:     __nop();
  1808   00142E  0000               	nop	
  1809   001430                     
  1810                           ;lcd.c: 35:     status = PORTD << 4;
  1811   001430  3883               	swapf	131,w,c	;volatile
  1812   001432  0BF0               	andlw	240
  1813   001434  6E01               	movwf	ReadByte@status^0,c
  1814   001436                     
  1815                           ;lcd.c: 36:     LATDbits.LATD6 = 0;
  1816   001436  9C8C               	bcf	140,6,c	;volatile
  1817   001438                     
  1818                           ;lcd.c: 38:     LATDbits.LATD6 = 1;
  1819   001438  8C8C               	bsf	140,6,c	;volatile
  1820   00143A                     
  1821                           ;lcd.c: 39:     __nop();
  1822   00143A  0000               	nop	
  1823   00143C                     
  1824                           ;lcd.c: 40:     __nop();
  1825   00143C  0000               	nop	
  1826                           
  1827                           ;lcd.c: 42:     status |= PORTD & 0x0F;
  1828   00143E  5083               	movf	131,w,c	;volatile
  1829   001440  0B0F               	andlw	15
  1830   001442  1201               	iorwf	ReadByte@status^0,f,c
  1831   001444                     
  1832                           ;lcd.c: 43:     LATDbits.LATD6 = 0;
  1833   001444  9C8C               	bcf	140,6,c	;volatile
  1834   001446                     
  1835                           ;lcd.c: 45:     TRISDbits.TRISD0 = 0;
  1836   001446  9095               	bcf	149,0,c	;volatile
  1837   001448                     
  1838                           ;lcd.c: 46:     TRISDbits.TRISD1 = 0;
  1839   001448  9295               	bcf	149,1,c	;volatile
  1840   00144A                     
  1841                           ;lcd.c: 47:     TRISDbits.TRISD2 = 0;
  1842   00144A  9495               	bcf	149,2,c	;volatile
  1843   00144C                     
  1844                           ;lcd.c: 48:     TRISDbits.TRISD3 = 0;
  1845   00144C  9695               	bcf	149,3,c	;volatile
  1846   00144E                     
  1847                           ;lcd.c: 50:     return(status);
  1848   00144E  5001               	movf	ReadByte@status^0,w,c
  1849   001450  0012               	return		;funcret
  1850   001452                     __end_of_ReadByte:
  1851                           	callstack 0
  1852                           
  1853 ;; *************** function _I2C_Write_Register *****************
  1854 ;; Defined at:
  1855 ;;		line 82 in file "mesure_temp.c"
  1856 ;; Parameters:    Size  Location     Type
  1857 ;;  reg             1    wreg     unsigned char 
  1858 ;;  value           2    2[COMRAM] unsigned int 
  1859 ;; Auto vars:     Size  Location     Type
  1860 ;;  reg             1    4[COMRAM] unsigned char 
  1861 ;; Return value:  Size  Location     Type
  1862 ;;                  1    wreg      void 
  1863 ;; Registers used:
  1864 ;;		wreg, status,2, status,0, cstack
  1865 ;; Tracked objects:
  1866 ;;		On entry : 0/0
  1867 ;;		On exit  : 0/0
  1868 ;;		Unchanged: 0/0
  1869 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1870 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1871 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1872 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1873 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1874 ;;Total ram usage:        3 bytes
  1875 ;; Hardware stack levels used: 1
  1876 ;; Hardware stack levels required when called: 2
  1877 ;; This function calls:
  1878 ;;		_i2c_start
  1879 ;;		_i2c_stop
  1880 ;;		_i2c_write
  1881 ;; This function is called by:
  1882 ;;		_main
  1883 ;; This function uses a non-reentrant model
  1884 ;;
  1885                           
  1886                           	psect	text17
  1887   00147E                     __ptext17:
  1888                           	callstack 0
  1889   00147E                     _I2C_Write_Register:
  1890                           	callstack 28
  1891                           
  1892                           ;incstack = 0
  1893                           ;I2C_Write_Register@reg stored from wreg
  1894   00147E  6E05               	movwf	I2C_Write_Register@reg^0,c
  1895   001480  ECD9  F00A         	call	_i2c_start	;wreg free
  1896   001484  0E80               	movlw	128
  1897   001486  EC90  F00A         	call	_i2c_write
  1898   00148A  5005               	movf	I2C_Write_Register@reg^0,w,c
  1899   00148C  EC90  F00A         	call	_i2c_write
  1900   001490  5004               	movf	(I2C_Write_Register@value+1)^0,w,c
  1901   001492  EC90  F00A         	call	_i2c_write
  1902   001496  5003               	movf	I2C_Write_Register@value^0,w,c
  1903   001498  EC90  F00A         	call	_i2c_write
  1904   00149C  ECB7  F00A         	call	_i2c_stop	;wreg free
  1905   0014A0  0012               	return		;funcret
  1906   0014A2                     __end_of_I2C_Write_Register:
  1907                           	callstack 0
  1908                           
  1909 ;; *************** function _i2c_write *****************
  1910 ;; Defined at:
  1911 ;;		line 106 in file "i2c.c"
  1912 ;; Parameters:    Size  Location     Type
  1913 ;;  i2cWriteData    1    wreg     unsigned char 
  1914 ;; Auto vars:     Size  Location     Type
  1915 ;;  i2cWriteData    1    1[COMRAM] unsigned char 
  1916 ;; Return value:  Size  Location     Type
  1917 ;;                  1    wreg      void 
  1918 ;; Registers used:
  1919 ;;		wreg, status,2, status,0, cstack
  1920 ;; Tracked objects:
  1921 ;;		On entry : 0/0
  1922 ;;		On exit  : 0/0
  1923 ;;		Unchanged: 0/0
  1924 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1925 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1926 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1927 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1928 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1929 ;;Total ram usage:        1 bytes
  1930 ;; Hardware stack levels used: 1
  1931 ;; Hardware stack levels required when called: 1
  1932 ;; This function calls:
  1933 ;;		_i2c_waitForIdle
  1934 ;; This function is called by:
  1935 ;;		_I2C_Write_Register
  1936 ;;		_main
  1937 ;; This function uses a non-reentrant model
  1938 ;;
  1939                           
  1940                           	psect	text18
  1941   001520                     __ptext18:
  1942                           	callstack 0
  1943   001520                     _i2c_write:
  1944                           	callstack 29
  1945                           
  1946                           ;incstack = 0
  1947                           ;i2c_write@i2cWriteData stored from wreg
  1948   001520  6E02               	movwf	i2c_write@i2cWriteData^0,c
  1949   001522                     
  1950                           ;i2c.c: 108:     i2c_waitForIdle();
  1951   001522  EC29  F00A         	call	_i2c_waitForIdle	;wreg free
  1952   001526                     
  1953                           ;i2c.c: 110:     PIR1bits.SSP1IF = 0;
  1954   001526  969E               	bcf	158,3,c	;volatile
  1955   001528                     
  1956                           ;i2c.c: 111:     SSP1BUF = i2cWriteData;
  1957   001528  C002  FFC9         	movff	i2c_write@i2cWriteData,4041	;volatile
  1958   00152C                     l74:
  1959   00152C  A69E               	btfss	158,3,c	;volatile
  1960   00152E  EF9B  F00A         	goto	u81
  1961   001532  EF9D  F00A         	goto	u80
  1962   001536                     u81:
  1963   001536  EF96  F00A         	goto	l74
  1964   00153A                     u80:
  1965   00153A  0012               	return		;funcret
  1966   00153C                     __end_of_i2c_write:
  1967                           	callstack 0
  1968                           
  1969 ;; *************** function _i2c_stop *****************
  1970 ;; Defined at:
  1971 ;;		line 68 in file "i2c.c"
  1972 ;; Parameters:    Size  Location     Type
  1973 ;;		None
  1974 ;; Auto vars:     Size  Location     Type
  1975 ;;		None
  1976 ;; Return value:  Size  Location     Type
  1977 ;;                  1    wreg      void 
  1978 ;; Registers used:
  1979 ;;		wreg, status,2, status,0, cstack
  1980 ;; Tracked objects:
  1981 ;;		On entry : 0/0
  1982 ;;		On exit  : 0/0
  1983 ;;		Unchanged: 0/0
  1984 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1985 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1986 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1987 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1988 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1989 ;;Total ram usage:        0 bytes
  1990 ;; Hardware stack levels used: 1
  1991 ;; Hardware stack levels required when called: 1
  1992 ;; This function calls:
  1993 ;;		_i2c_waitForIdle
  1994 ;; This function is called by:
  1995 ;;		_I2C_Write_Register
  1996 ;;		_main
  1997 ;; This function uses a non-reentrant model
  1998 ;;
  1999                           
  2000                           	psect	text19
  2001   00156E                     __ptext19:
  2002                           	callstack 0
  2003   00156E                     _i2c_stop:
  2004                           	callstack 29
  2005   00156E                     
  2006                           ;i2c.c: 70:     i2c_waitForIdle();
  2007   00156E  EC29  F00A         	call	_i2c_waitForIdle	;wreg free
  2008   001572                     
  2009                           ;i2c.c: 72:     PIR1bits.SSP1IF = 0;
  2010   001572  969E               	bcf	158,3,c	;volatile
  2011   001574                     
  2012                           ;i2c.c: 73:     SSP1CON2bits.PEN = 1;
  2013   001574  84C5               	bsf	197,2,c	;volatile
  2014   001576                     l50:
  2015   001576  A69E               	btfss	158,3,c	;volatile
  2016   001578  EFC0  F00A         	goto	u71
  2017   00157C  EFC2  F00A         	goto	u70
  2018   001580                     u71:
  2019   001580  EFBB  F00A         	goto	l50
  2020   001584                     u70:
  2021   001584  0012               	return		;funcret
  2022   001586                     __end_of_i2c_stop:
  2023                           	callstack 0
  2024                           
  2025 ;; *************** function _i2c_waitForIdle *****************
  2026 ;; Defined at:
  2027 ;;		line 46 in file "i2c.c"
  2028 ;; Parameters:    Size  Location     Type
  2029 ;;		None
  2030 ;; Auto vars:     Size  Location     Type
  2031 ;;		None
  2032 ;; Return value:  Size  Location     Type
  2033 ;;                  1    wreg      void 
  2034 ;; Registers used:
  2035 ;;		wreg, status,2, status,0
  2036 ;; Tracked objects:
  2037 ;;		On entry : 0/0
  2038 ;;		On exit  : 0/0
  2039 ;;		Unchanged: 0/0
  2040 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2041 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2042 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2043 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2044 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2045 ;;Total ram usage:        1 bytes
  2046 ;; Hardware stack levels used: 1
  2047 ;; This function calls:
  2048 ;;		Nothing
  2049 ;; This function is called by:
  2050 ;;		_i2c_repStart
  2051 ;;		_i2c_stop
  2052 ;;		_i2c_read
  2053 ;;		_i2c_write
  2054 ;; This function uses a non-reentrant model
  2055 ;;
  2056                           
  2057                           	psect	text20
  2058   001452                     __ptext20:
  2059                           	callstack 0
  2060   001452                     _i2c_waitForIdle:
  2061                           	callstack 29
  2062   001452                     l925:
  2063   001452  B4C7               	btfsc	199,2,c	;volatile
  2064   001454  EF2E  F00A         	goto	u41
  2065   001458  EF32  F00A         	goto	u40
  2066   00145C                     u41:
  2067   00145C  6A01               	clrf	??_i2c_waitForIdle^0,c
  2068   00145E  2A01               	incf	??_i2c_waitForIdle^0,f,c
  2069   001460  EF33  F00A         	goto	u48
  2070   001464                     u40:
  2071   001464  6A01               	clrf	??_i2c_waitForIdle^0,c
  2072   001466                     u48:
  2073   001466  50C5               	movf	197,w,c	;volatile
  2074   001468  0B1F               	andlw	31
  2075   00146A  1001               	iorwf	??_i2c_waitForIdle^0,w,c
  2076   00146C  0900               	iorlw	0
  2077   00146E  A4D8               	btfss	status,2,c
  2078   001470  EF3C  F00A         	goto	u51
  2079   001474  EF3E  F00A         	goto	u50
  2080   001478                     u51:
  2081   001478  EF29  F00A         	goto	l925
  2082   00147C                     u50:
  2083   00147C  0012               	return		;funcret
  2084   00147E                     __end_of_i2c_waitForIdle:
  2085                           	callstack 0
  2086                           
  2087 ;; *************** function _i2c_start *****************
  2088 ;; Defined at:
  2089 ;;		line 52 in file "i2c.c"
  2090 ;; Parameters:    Size  Location     Type
  2091 ;;		None
  2092 ;; Auto vars:     Size  Location     Type
  2093 ;;		None
  2094 ;; Return value:  Size  Location     Type
  2095 ;;                  1    wreg      void 
  2096 ;; Registers used:
  2097 ;;		None
  2098 ;; Tracked objects:
  2099 ;;		On entry : 0/0
  2100 ;;		On exit  : 0/0
  2101 ;;		Unchanged: 0/0
  2102 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2103 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2104 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2105 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2106 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2107 ;;Total ram usage:        0 bytes
  2108 ;; Hardware stack levels used: 1
  2109 ;; This function calls:
  2110 ;;		Nothing
  2111 ;; This function is called by:
  2112 ;;		_I2C_Write_Register
  2113 ;;		_main
  2114 ;; This function uses a non-reentrant model
  2115 ;;
  2116                           
  2117                           	psect	text21
  2118   0015B2                     __ptext21:
  2119                           	callstack 0
  2120   0015B2                     _i2c_start:
  2121                           	callstack 30
  2122   0015B2                     
  2123                           ;i2c.c: 54:     PIR1bits.SSP1IF = 0;
  2124   0015B2  969E               	bcf	158,3,c	;volatile
  2125                           
  2126                           ;i2c.c: 55:     SSP1CON2bits.SEN = 1;
  2127   0015B4  80C5               	bsf	197,0,c	;volatile
  2128   0015B6                     l38:
  2129   0015B6  A69E               	btfss	158,3,c	;volatile
  2130   0015B8  EFE0  F00A         	goto	u61
  2131   0015BC  EFE2  F00A         	goto	u60
  2132   0015C0                     u61:
  2133   0015C0  EFDB  F00A         	goto	l38
  2134   0015C4                     u60:
  2135   0015C4  0012               	return		;funcret
  2136   0015C6                     __end_of_i2c_start:
  2137                           	callstack 0
  2138                           
  2139                           	psect	rparam
  2140   000000                     
  2141                           	psect	config
  2142                           
  2143                           ; Padding undefined space
  2144   300000                     	org	3145728
  2145   300000  FF                 	db	255
  2146                           
  2147                           ;Config register CONFIG1H @ 0x300001
  2148                           ;	Oscillator Selection bits
  2149                           ;	FOSC = INTIO67, Internal oscillator block
  2150                           ;	4X PLL Enable
  2151                           ;	PLLCFG = OFF, Oscillator used directly
  2152                           ;	Primary clock enable bit
  2153                           ;	PRICLKEN = ON, Primary clock is always enabled
  2154                           ;	Fail-Safe Clock Monitor Enable bit
  2155                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2156                           ;	Internal/External Oscillator Switchover bit
  2157                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2158   300001                     	org	3145729
  2159   300001  28                 	db	40
  2160                           
  2161                           ;Config register CONFIG2L @ 0x300002
  2162                           ;	Power-up Timer Enable bit
  2163                           ;	PWRTEN = OFF, Power up timer disabled
  2164                           ;	Brown-out Reset Enable bits
  2165                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2166                           ;	Brown Out Reset Voltage bits
  2167                           ;	BORV = 190, VBOR set to 1.90 V nominal
  2168   300002                     	org	3145730
  2169   300002  1F                 	db	31
  2170                           
  2171                           ;Config register CONFIG2H @ 0x300003
  2172                           ;	Watchdog Timer Enable bits
  2173                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2174                           ;	Watchdog Timer Postscale Select bits
  2175                           ;	WDTPS = 32768, 1:32768
  2176   300003                     	org	3145731
  2177   300003  3C                 	db	60
  2178                           
  2179                           ; Padding undefined space
  2180   300004                     	org	3145732
  2181   300004  FF                 	db	255
  2182                           
  2183                           ;Config register CONFIG3H @ 0x300005
  2184                           ;	CCP2 MUX bit
  2185                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  2186                           ;	PORTB A/D Enable bit
  2187                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2188                           ;	P3A/CCP3 Mux bit
  2189                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  2190                           ;	HFINTOSC Fast Start-up
  2191                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  2192                           ;	Timer3 Clock input mux bit
  2193                           ;	T3CMX = PORTC0, T3CKI is on RC0
  2194                           ;	ECCP2 B output mux bit
  2195                           ;	P2BMX = PORTD2, P2B is on RD2
  2196                           ;	MCLR Pin Enable bit
  2197                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  2198   300005                     	org	3145733
  2199   300005  BD                 	db	189
  2200                           
  2201                           ;Config register CONFIG4L @ 0x300006
  2202                           ;	Stack Full/Underflow Reset Enable bit
  2203                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2204                           ;	Single-Supply ICSP Enable bit
  2205                           ;	LVP = OFF, Single-Supply ICSP disabled
  2206                           ;	Extended Instruction Set Enable bit
  2207                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2208                           ;	Background Debug
  2209                           ;	DEBUG = 0x1, unprogrammed default
  2210   300006                     	org	3145734
  2211   300006  81                 	db	129
  2212                           
  2213                           ; Padding undefined space
  2214   300007                     	org	3145735
  2215   300007  FF                 	db	255
  2216                           
  2217                           ;Config register CONFIG5L @ 0x300008
  2218                           ;	Code Protection Block 0
  2219                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2220                           ;	Code Protection Block 1
  2221                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2222                           ;	Code Protection Block 2
  2223                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2224                           ;	Code Protection Block 3
  2225                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2226   300008                     	org	3145736
  2227   300008  0F                 	db	15
  2228                           
  2229                           ;Config register CONFIG5H @ 0x300009
  2230                           ;	Boot Block Code Protection bit
  2231                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2232                           ;	Data EEPROM Code Protection bit
  2233                           ;	CPD = OFF, Data EEPROM not code-protected
  2234   300009                     	org	3145737
  2235   300009  C0                 	db	192
  2236                           
  2237                           ;Config register CONFIG6L @ 0x30000A
  2238                           ;	Write Protection Block 0
  2239                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2240                           ;	Write Protection Block 1
  2241                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2242                           ;	Write Protection Block 2
  2243                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2244                           ;	Write Protection Block 3
  2245                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2246   30000A                     	org	3145738
  2247   30000A  0F                 	db	15
  2248                           
  2249                           ;Config register CONFIG6H @ 0x30000B
  2250                           ;	Configuration Register Write Protection bit
  2251                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2252                           ;	Boot Block Write Protection bit
  2253                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2254                           ;	Data EEPROM Write Protection bit
  2255                           ;	WRTD = OFF, Data EEPROM not write-protected
  2256   30000B                     	org	3145739
  2257   30000B  E0                 	db	224
  2258                           
  2259                           ;Config register CONFIG7L @ 0x30000C
  2260                           ;	Table Read Protection Block 0
  2261                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2262                           ;	Table Read Protection Block 1
  2263                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2264                           ;	Table Read Protection Block 2
  2265                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2266                           ;	Table Read Protection Block 3
  2267                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2268   30000C                     	org	3145740
  2269   30000C  0F                 	db	15
  2270                           
  2271                           ;Config register CONFIG7H @ 0x30000D
  2272                           ;	Boot Block Table Read Protection bit
  2273                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2274   30000D                     	org	3145741
  2275   30000D  40                 	db	64
  2276                           tosu	equ	0xFFF
  2277                           tosh	equ	0xFFE
  2278                           tosl	equ	0xFFD
  2279                           stkptr	equ	0xFFC
  2280                           pclatu	equ	0xFFB
  2281                           pclath	equ	0xFFA
  2282                           pcl	equ	0xFF9
  2283                           tblptru	equ	0xFF8
  2284                           tblptrh	equ	0xFF7
  2285                           tblptrl	equ	0xFF6
  2286                           tablat	equ	0xFF5
  2287                           prodh	equ	0xFF4
  2288                           prodl	equ	0xFF3
  2289                           indf0	equ	0xFEF
  2290                           postinc0	equ	0xFEE
  2291                           postdec0	equ	0xFED
  2292                           preinc0	equ	0xFEC
  2293                           plusw0	equ	0xFEB
  2294                           fsr0h	equ	0xFEA
  2295                           fsr0l	equ	0xFE9
  2296                           wreg	equ	0xFE8
  2297                           indf1	equ	0xFE7
  2298                           postinc1	equ	0xFE6
  2299                           postdec1	equ	0xFE5
  2300                           preinc1	equ	0xFE4
  2301                           plusw1	equ	0xFE3
  2302                           fsr1h	equ	0xFE2
  2303                           fsr1l	equ	0xFE1
  2304                           bsr	equ	0xFE0
  2305                           indf2	equ	0xFDF
  2306                           postinc2	equ	0xFDE
  2307                           postdec2	equ	0xFDD
  2308                           preinc2	equ	0xFDC
  2309                           plusw2	equ	0xFDB
  2310                           fsr2h	equ	0xFDA
  2311                           fsr2l	equ	0xFD9
  2312                           status	equ	0xFD8

Data Sizes:
    Strings     49
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteHexa@hexa	PTR unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 16
		 -> LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), LCDWriteInt@string(COMRAM[3]), main@string(COMRAM[16]), 
		 -> STR_3(CODE[11]), STR_4(CODE[11]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_LCDWriteHexa
    _i2c_repStart->_i2c_waitForIdle
    _i2c_read->_i2c_waitForIdle
    _LCDWriteHexa->_LCDGoto
    _LCDWriteHexa->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte
    _I2C_Write_Register->_i2c_write
    _i2c_write->_i2c_waitForIdle
    _i2c_stop->_i2c_waitForIdle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    21      5   13137
                                             20 COMRAM    26    21      5
                 _I2C_Write_Register
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                       _LCDWriteHexa
                        _LCDWriteStr
                            _i2c_ACK
                            _i2c_NAK
                           _i2c_init
                           _i2c_read
                       _i2c_repStart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               4     2      2     225
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _i2c_repStart                                         0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                             1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_NAK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_ACK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteHexa                                         9     7      2    5066
                                             11 COMRAM     9     7      2
                            _LCDGoto
                        _LCDWriteStr
 ---------------------------------------------------------------------------------
 (1) _LCDWriteStr                                          5     3      2    2267
                                              6 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           1     1      0    1721
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (2) _LCDGoto                                              6     5      1    2289
                                              5 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1307
                                              3 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             1     1      0    1699
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _WriteByte                                            2     1      1    1652
                                              3 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (4) _WriteNibble                                          3     2      1    1260
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _WaitLCD                                              1     1      0      47
                                              1 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (4) _ReadByte                                             1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Write_Register                                   3     1      2     157
                                              2 COMRAM     3     1      2
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _i2c_write                                            1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_stop                                             0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (2) _i2c_waitForIdle                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Write_Register
     _i2c_start
     _i2c_stop
       _i2c_waitForIdle
     _i2c_write
       _i2c_waitForIdle
   _LCDClear
     _WaitLCD
       _ReadByte
     _WriteByte
       _WriteNibble
   _LCDGoto
     _WaitLCD
     _WriteByte
   _LCDInit
     _WaitLCD
     _WriteNibble
   _LCDWriteHexa
     _LCDGoto
     _LCDWriteStr
       _LCDPutChar
         _WaitLCD
         _WriteByte
   _LCDWriteStr
   _i2c_ACK
   _i2c_NAK
   _i2c_init
   _i2c_read
     _i2c_waitForIdle
   _i2c_repStart
     _i2c_waitForIdle
   _i2c_start
   _i2c_stop
   _i2c_write
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2E      30       1       50.5%
BITBIGSFRlhll       48      0       0      43        0.0%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRhhhh       34      0       0      36        0.0%
BITBIGSFRhlhh       23      0       0      38        0.0%
BITBIGSFRlhlh        8      0       0      42        0.0%
BITBIGSFRhll         8      0       0      40        0.0%
BITBIGSFRlhh         7      0       0      41        0.0%
BITBIGSFRhlhl        2      0       0      39        0.0%
BITBIGSFRll          2      0       0      44        0.0%
BITBIGSFRhhhl        1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      45        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Jun 14 15:23:08 2024

                        l41 15C4                          l50 1576                          l35 147C  
               ?_LCDPutChar 0001                          l44 155E                          l53 1584  
                        l29 13EE                          l38 15B6                          l62 158C  
                        l70 14DA                          l71 14E2                          l47 156C  
                        l56 15A2                          l65 159A                          l74 152C  
                        l59 15B0                          l92 1450                          l68 14CC  
                        l77 153A                          l96 151C                          l97 151E  
                        u40 1464                          u41 145C                          u50 147C  
                        u51 1478                          u60 15C4                          u61 15C0  
                        u70 1584                          u71 1580                          u48 1466  
                        u80 153A                          u81 1536                         l100 13B2  
                       l103 1554                         l106 1226                         l122 15D6  
                       l115 130C                         l131 12A2                         l109 1502  
                       l134 1366                         l179 14A0                         l923 1452  
                       l931 156E                         l925 1452                         l933 1572  
                       l941 1528                         l935 1574                         l929 15B2  
                       l937 1522                         l939 1526                         l971 13C4  
                       l981 13D2                         l973 13C6                         l965 13B4  
                       l869 1420                         l991 13DC                         l983 13D4  
                       l975 13CC                         l967 13BE                         l985 13D6  
                       l977 13CE                         l969 13C2                         l993 1556  
                       l987 13D8                         l979 13D0                         l995 155A  
                       l989 13DA                         l997 155C                         l999 159C  
                       u210 137E                         u211 1376                         u300 1420  
                       u301 141C                         u230 151C                         u150 156C  
                       u231 1518                         u151 1568                         u240 12B6  
                       u160 15B0                         u241 12B2                         u161 15AC  
                       u250 12C6                         u170 159A                         u251 12C2  
                       u171 1596                         u228 1380                         u260 12DA  
                       u180 14DA                         u261 12D6                         u181 14D6  
                       u270 125E                         u327 105C                         u280 1292  
                       u337 10A6                         u290 12A2                         u291 129E  
                       u347 112E                         u357 1158                         u277 1254  
                       u367 1172                         u287 1288                         u377 1188  
                       u387 119A                         u397 14F4                         wreg 0FE8  
           __end_of_LCDInit 1228             __end_of_LCDGoto 130E                ?_LCDWriteStr 0007  
                      l1001 1586                        l1011 14E0                        l1003 14C4  
                      l1005 14C4                        l1007 14C8                        l1201 1446  
                      l1009 14CA                        l1203 1448                        l1205 144A  
                      l1221 1398                        l1213 136A                        l1301 120A  
                      l1207 144C                        l1231 1504                        l1223 139A  
                      l1215 138C                        l1311 14EE                        l1303 120E  
                      l1209 144E                        l1233 1508                        l1225 13AC  
                      l1217 138E                        l1313 14FE                        l1305 1218  
                      l1241 12A6                        l1321 134E                        l1401 10B4  
                      l1331 148A                        l1235 150E                        l1227 13AE  
                      l1219 1390                        l1307 1222                        l1251 12FE  
                      l1243 12B6                        l1323 1352                        l1315 1310  
                      l1411 10D0                        l1403 10BA                        l1333 1490  
                      l1229 13B0                        l1237 153E                        l1309 14E4  
                      l1253 1308                        l1245 12CA                        l1261 1264  
                      l1325 135C                        l1317 1314                        l1341 13F4  
                      l1421 10EA                        l1413 10D4                        l1405 10C0  
                      l1335 1496                        l1327 1480                        l1191 1436  
                      l1271 1186                        l1263 1140                        l1247 12DA  
                      l1239 15C8                        l1255 1228                        l1319 1332  
                      l1431 1118                        l1423 10EE                        l1415 10DA  
                      l1407 10C4                        l1337 149C                        l1329 1484  
                      l1193 1438                        l1281 11B8                        l1273 118E  
                      l1265 1152                        l1249 12EE                        l1257 1230  
                      l1433 1128                        l1425 10F2                        l1417 10E0  
                      l1409 10CA                        l1195 143A                        l1187 1422  
                      l1291 11DE                        l1283 11C2                        l1275 11A0  
                      l1267 1162                        l1259 1262                        l1339 13F0  
                      l1427 1100                        l1419 10E4                        l1197 143C  
                      l1189 1430                        l1293 11E8                        l1285 11C6  
                      l1277 11AA                        l1269 116C                        l1429 110E  
                      l1381 1056                        l1373 1034                        l1199 1444  
                      l1295 11F2                        l1287 11D0                        l1279 11AE  
                      l1391 1086                        l1383 1066                        l1375 103C  
                      l1297 11F6                        l1289 11DA                        l1393 1086  
                      l1385 1070                        l1377 1044                        l1299 1200  
                      l1395 1090                        l1387 107C                        l1379 1048  
                      l1397 10A0                        l1389 1086                        l1399 10B0  
                      STR_1 1001                        STR_2 1028                        STR_3 101D  
                      STR_4 1012                        _LATD 0F8C                        _main 1034  
                      fsr0h 0FEA                        indf0 0FEF                        fsr2h 0FDA  
                      fsr0l 0FE9                        indf2 0FDF                        fsr2l 0FD9  
         ??_i2c_waitForIdle 0001                        start 0000               ?_i2c_repStart 0001  
           __end_of_i2c_ACK 15B2             __end_of_i2c_NAK 159C                ___param_bank 0000  
          __end_of_LCDClear 1504             __end_of_WaitLCD 1520               ?_LCDWriteHexa 000C  
                     ?_main 0015                       _PORTD 0F83                       tablat 0FF5  
                     status 0FD8               WaitLCD@status 0002              ??_i2c_repStart 0002  
           __initialization 14A2                __end_of_main 1140              ??_LCDWriteHexa 000E  
          __end_of_i2c_init 13F0            __end_of_i2c_read 14E4            __end_of_ReadByte 1452  
          __end_of_i2c_stop 1586                      ??_main 001A               __activetblptr 0002  
                 ??_LCDInit 0004                   ??_LCDGoto 0007               LCDGoto@column 000B  
                 ??_i2c_ACK 0001                   ??_i2c_NAK 0001                   ??_WaitLCD 0002  
                    isa$std 0001                      _strcpy 13F0       i2c_write@i2cWriteData 0002  
              __pdataCOMRAM 002F                __mediumconst 0000                      tblptrh 0FF7  
              LCDWriteStr@i 000B                      tblptrl 0FF6                      tblptru 0FF8  
                 ?_LCDClear 0001                  __accesstop 0060     __end_of__initialization 14BA  
             ___rparam_used 0001              __pcstackCOMRAM 0001              WriteNibble@cmd 0003  
              ??_LCDPutChar 0006           __end_of_i2c_start 15C6           __end_of_i2c_write 153C  
      __end_of_i2c_repStart 156E             _i2c_waitForIdle 1452         i2c_read@i2cReadData 0002  
      __end_of_LCDWriteHexa 1368                WriteByte@cmd 0005                  ??_LCDClear 0006  
                 ?_i2c_init 0001                   ?_i2c_read 0001                   ?_ReadByte 0001  
                 ?_i2c_stop 0001          __end_of_LCDPutChar 15D8           LCDWriteHexa@value 000D  
             ??_WriteNibble 0002                     ?_strcpy 0001           __end_of_WriteByte 1556  
                   _LCDInit 1140                     _LCDGoto 12A4                     _SSP1ADD 0FC8  
                   _SSP1BUF 0FC9                  ??_i2c_init 0001                  ??_i2c_read 0002  
                ??_ReadByte 0001                  ??_i2c_stop 0002                     _i2c_ACK 159C  
                   _i2c_NAK 1586                     __Hparam 0000                     _WaitLCD 1504  
                   __Lparam 0000                __psmallconst 1000                     __pcinit 14A2  
__end_of_I2C_Write_Register 14A2                     __ramtop 1000     __end_of_i2c_waitForIdle 147E  
                   __ptext0 1034                     __ptext1 13F0                     __ptext2 1556  
                   __ptext3 14C4                     __ptext4 13B4                     __ptext5 1586  
                   __ptext6 159C                     __ptext7 130E                     __ptext8 1228  
                   __ptext9 15C6         __end_of_WriteNibble 13B4        end_of_initialization 14BA  
             __Lmediumconst 0000           LCDWriteStr@string 0007                     strcpy@d 0004  
     I2C_Write_Register@reg 0005                   _TRISCbits 0F94                   _TRISDbits 0F95  
                LCDGoto@row 0006                  main@string 001B                _i2c_repStart 1556  
           WriteNibble@data 0001                 _WriteNibble 1368                _LCDWriteHexa 130E  
             __pidataCOMRAM 15D8            ?_i2c_waitForIdle 0001              __end_of_strcpy 1422  
       start_initialization 14A2                   _i2c_start 15B2                   _i2c_write 1520  
             ??_LCDWriteStr 0009                    ??_strcpy 0003                    ?_LCDInit 0001  
                  ?_LCDGoto 0006               WriteByte@data 0004                  ?_i2c_start 0001  
                ?_i2c_write 0001                   _WriteByte 153C              LCDPutChar@data 0006  
        LCDWriteHexa@column 0010          LCDWriteHexa@string 0011                    ?_i2c_ACK 0001  
                  ?_i2c_NAK 0001         __end_of_LCDWriteStr 12A4            LCDWriteHexa@hexa 0014  
                  ?_WaitLCD 0001                 __smallconst 1000                  ?_WriteByte 0004  
        _I2C_Write_Register 147E                    _LCDClear 14E4                    _LATDbits 0F8C  
       ?_I2C_Write_Register 0003                 _LCDGoto$623 0009                    _PIR1bits 0F9E  
                  _PIR2bits 0FA1                   main@F6555 002F                    _SSP1CON1 0FC6  
                  _SSP1CON2 0FC5                    _SSP1STAT 0FC7        ??_I2C_Write_Register 0005  
                 main@degre 002B                   main@temp2 002E                 ??_i2c_start 0001  
               ??_i2c_write 0002                 _LCDWriteStr 1228                    _i2c_init 13B4  
                  _i2c_read 14C4                    _ReadByte 1422                    _i2c_stop 156E  
                  __Hrparam 0000                    __Lrparam 0000                ?_WriteNibble 0001  
                _ANSELCbits 0F3A             LCDWriteHexa@row 000C                 ??_WriteByte 0005  
                  __ptext10 12A4                    __ptext11 1140                    __ptext20 1452  
                  __ptext12 14E4                    __ptext21 15B2                    __ptext13 153C  
                  __ptext14 1368                    __ptext15 1504                    __ptext16 1422  
                  __ptext17 147E                    __ptext18 1520                    __ptext19 156E  
              _SSP1CON2bits 0FC5                _SSP1CON3bits 0FCB                  strcpy@dest 0001  
                  isa$xinst 0000              ReadByte@status 0001                  _LCDPutChar 15C6  
                  main@argc 0015                    main@argv 0017                _SSP1STATbits 0FC7  
                  main@temp 002D                   strcpy@src 0002     I2C_Write_Register@value 0003  

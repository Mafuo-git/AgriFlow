

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Jun 14 15:24:30 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F46K22
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	text0,global,reloc=2,class=CODE,delta=1
    11                           	psect	text1,global,reloc=2,class=CODE,delta=1,group=2
    12                           	psect	text2,global,reloc=2,class=CODE,delta=1
    13                           	psect	text3,global,reloc=2,class=CODE,delta=1
    14                           	psect	text4,global,reloc=2,class=CODE,delta=1
    15                           	psect	text5,global,reloc=2,class=CODE,delta=1
    16                           	psect	text6,global,reloc=2,class=CODE,delta=1
    17                           	psect	text7,global,reloc=2,class=CODE,delta=1
    18                           	psect	text8,global,reloc=2,class=CODE,delta=1
    19                           	psect	text9,global,reloc=2,class=CODE,delta=1
    20                           	psect	text10,global,reloc=2,class=CODE,delta=1
    21                           	psect	text11,global,reloc=2,class=CODE,delta=1
    22                           	psect	text12,global,reloc=2,class=CODE,delta=1
    23                           	psect	text13,global,reloc=2,class=CODE,delta=1
    24                           	psect	text14,global,reloc=2,class=CODE,delta=1
    25                           	psect	text15,global,reloc=2,class=CODE,delta=1
    26                           	psect	text16,global,reloc=2,class=CODE,delta=1
    27                           	psect	text17,global,reloc=2,class=CODE,delta=1
    28                           	psect	text18,global,reloc=2,class=CODE,delta=1
    29                           	psect	text19,global,reloc=2,class=CODE,delta=1
    30                           	psect	text20,global,reloc=2,class=CODE,delta=1
    31                           	psect	text21,global,reloc=2,class=CODE,delta=1
    32                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    33                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    34                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    35   000000                     
    36                           ; Generated 21/07/2023 GMT
    37                           ; 
    38                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    39                           ; All rights reserved.
    40                           ; 
    41                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    42                           ; 
    43                           ; Redistribution and use in source and binary forms, with or without modification, are
    44                           ; permitted provided that the following conditions are met:
    45                           ; 
    46                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    47                           ;        conditions and the following disclaimer.
    48                           ; 
    49                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    50                           ;        of conditions and the following disclaimer in the documentation and/or other
    51                           ;        materials provided with the distribution. Publication is not required when
    52                           ;        this file is used in an embedded application.
    53                           ; 
    54                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    55                           ;        software without specific prior written permission.
    56                           ; 
    57                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    58                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    59                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    60                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    61                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    62                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    63                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    64                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    65                           ; 
    66                           ; 
    67                           ; Code-generator required, PIC18F46K22 Definitions
    68                           ; 
    69                           ; SFR Addresses
    70   000000                     
    71                           	psect	idataCOMRAM
    72   0015C8                     __pidataCOMRAM:
    73                           	callstack 0
    74                           
    75                           ;initializer for main@F6555
    76   0015C8  DF                 	db	223
    77   0015C9  00                 	db	0
    78   000000                     _SSP1STATbits	set	4039
    79   000000                     _SSP1ADD	set	4040
    80   000000                     _LATD	set	3980
    81   000000                     _SSP1CON2bits	set	4037
    82   000000                     _SSP1STAT	set	4039
    83   000000                     _ANSELCbits	set	3898
    84   000000                     _TRISCbits	set	3988
    85   000000                     _TRISDbits	set	3989
    86   000000                     _PIR1bits	set	3998
    87   000000                     _SSP1CON1	set	4038
    88   000000                     _PORTD	set	3971
    89   000000                     _LATDbits	set	3980
    90   000000                     _SSP1BUF	set	4041
    91   000000                     _SSP1CON3bits	set	4043
    92   000000                     _PIR2bits	set	4001
    93   000000                     _SSP1CON2	set	4037
    94                           
    95                           	psect	smallconst
    96   001000                     __psmallconst:
    97                           	callstack 0
    98   001000  00                 	db	0
    99   001001                     STR_1:
   100   001001  30                 	db	48	;'0'
   101   001002  31                 	db	49	;'1'
   102   001003  32                 	db	50	;'2'
   103   001004  33                 	db	51	;'3'
   104   001005  34                 	db	52	;'4'
   105   001006  35                 	db	53	;'5'
   106   001007  36                 	db	54	;'6'
   107   001008  37                 	db	55	;'7'
   108   001009  38                 	db	56	;'8'
   109   00100A  39                 	db	57	;'9'
   110   00100B  41                 	db	65	;'A'
   111   00100C  42                 	db	66	;'B'
   112   00100D  43                 	db	67	;'C'
   113   00100E  44                 	db	68	;'D'
   114   00100F  45                 	db	69	;'E'
   115   001010  46                 	db	70	;'F'
   116   001011  00                 	db	0
   117   001012                     STR_4:
   118   001012  50                 	db	80	;'P'
   119   001013  61                 	db	97	;'a'
   120   001014  75                 	db	117	;'u'
   121   001015  73                 	db	115	;'s'
   122   001016  65                 	db	101	;'e'
   123   001017  20                 	db	32
   124   001018  20                 	db	32
   125   001019  20                 	db	32
   126   00101A  20                 	db	32
   127   00101B  20                 	db	32
   128   00101C  00                 	db	0
   129   00101D                     STR_3:
   130   00101D  43                 	db	67	;'C'
   131   00101E  6F                 	db	111	;'o'
   132   00101F  6E                 	db	110	;'n'
   133   001020  76                 	db	118	;'v'
   134   001021  65                 	db	101	;'e'
   135   001022  72                 	db	114	;'r'
   136   001023  73                 	db	115	;'s'
   137   001024  69                 	db	105	;'i'
   138   001025  6F                 	db	111	;'o'
   139   001026  6E                 	db	110	;'n'
   140   001027  00                 	db	0
   141   001028                     STR_2:
   142   001028  57                 	db	87	;'W'
   143   001029  61                 	db	97	;'a'
   144   00102A  74                 	db	116	;'t'
   145   00102B  74                 	db	116	;'t'
   146   00102C  20                 	db	32
   147   00102D  3D                 	db	61	;'='
   148   00102E  20                 	db	32
   149   00102F  20                 	db	32
   150   001030  20                 	db	32
   151   001031  00                 	db	0
   152   001032  00                 	db	0	; dummy byte at the end
   153   000000                     
   154                           ; #config settings
   155                           
   156                           	psect	cinit
   157   001492                     __pcinit:
   158                           	callstack 0
   159   001492                     start_initialization:
   160                           	callstack 0
   161   001492                     __initialization:
   162                           	callstack 0
   163                           
   164                           ; Initialize objects allocated to COMRAM (2 bytes)
   165                           ; load TBLPTR registers with __pidataCOMRAM
   166   001492  0EC8               	movlw	low __pidataCOMRAM
   167   001494  6EF6               	movwf	tblptrl,c
   168   001496  0E15               	movlw	high __pidataCOMRAM
   169   001498  6EF7               	movwf	tblptrh,c
   170   00149A  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   171   00149C  6EF8               	movwf	tblptru,c
   172   00149E  0009               	tblrd		*+	;fetch initializer
   173   0014A0  CFF5 F02F          	movff	tablat,__pdataCOMRAM
   174   0014A4  0009               	tblrd		*+	;fetch initializer
   175   0014A6  CFF5 F030          	movff	tablat,__pdataCOMRAM+1
   176   0014AA                     end_of_initialization:
   177                           	callstack 0
   178   0014AA                     __end_of__initialization:
   179                           	callstack 0
   180   0014AA  0E00               	movlw	low (__Lmediumconst shr (0+16))
   181   0014AC  6EF8               	movwf	tblptru,c
   182   0014AE  0100               	movlb	0
   183   0014B0  EF1A  F008         	goto	_main	;jump to C main() function
   184                           
   185                           	psect	dataCOMRAM
   186   00002F                     __pdataCOMRAM:
   187                           	callstack 0
   188   00002F                     main@F6555:
   189                           	callstack 0
   190   00002F                     	ds	2
   191                           
   192                           	psect	cstackCOMRAM
   193   000001                     __pcstackCOMRAM:
   194                           	callstack 0
   195   000001                     ??_i2c_waitForIdle:
   196   000001                     ReadByte@status:
   197                           	callstack 0
   198   000001                     WriteNibble@data:
   199                           	callstack 0
   200   000001                     strcpy@dest:
   201                           	callstack 0
   202                           
   203                           ; 1 bytes @ 0x0
   204   000001                     	ds	1
   205   000002                     ??_WriteNibble:
   206   000002                     i2c_read@i2cReadData:
   207                           	callstack 0
   208   000002                     i2c_write@i2cWriteData:
   209                           	callstack 0
   210   000002                     WaitLCD@status:
   211                           	callstack 0
   212   000002                     strcpy@src:
   213                           	callstack 0
   214                           
   215                           ; 1 bytes @ 0x1
   216   000002                     	ds	1
   217   000003                     ??_strcpy:
   218   000003                     WriteNibble@cmd:
   219                           	callstack 0
   220   000003                     I2C_Write_Register@value:
   221                           	callstack 0
   222                           
   223                           ; 2 bytes @ 0x2
   224   000003                     	ds	1
   225   000004                     ??_LCDInit:
   226   000004                     WriteByte@data:
   227                           	callstack 0
   228   000004                     strcpy@d:
   229                           	callstack 0
   230                           
   231                           ; 1 bytes @ 0x3
   232   000004                     	ds	1
   233   000005                     WriteByte@cmd:
   234                           	callstack 0
   235   000005                     I2C_Write_Register@reg:
   236                           	callstack 0
   237                           
   238                           ; 1 bytes @ 0x4
   239   000005                     	ds	1
   240   000006                     ??_LCDClear:
   241   000006                     LCDGoto@row:
   242                           	callstack 0
   243   000006                     LCDPutChar@data:
   244                           	callstack 0
   245                           
   246                           ; 1 bytes @ 0x5
   247   000006                     	ds	1
   248   000007                     ??_LCDGoto:
   249   000007                     LCDWriteStr@string:
   250                           	callstack 0
   251                           
   252                           ; 2 bytes @ 0x6
   253   000007                     	ds	2
   254   000009                     ??_LCDWriteStr:
   255   000009                     _LCDGoto$623:
   256                           	callstack 0
   257                           
   258                           ; 2 bytes @ 0x8
   259   000009                     	ds	2
   260   00000B                     LCDGoto@column:
   261                           	callstack 0
   262   00000B                     LCDWriteStr@i:
   263                           	callstack 0
   264                           
   265                           ; 1 bytes @ 0xA
   266   00000B                     	ds	1
   267   00000C                     LCDWriteHexa@row:
   268                           	callstack 0
   269                           
   270                           ; 1 bytes @ 0xB
   271   00000C                     	ds	1
   272   00000D                     LCDWriteHexa@value:
   273                           	callstack 0
   274                           
   275                           ; 1 bytes @ 0xC
   276   00000D                     	ds	1
   277   00000E                     ??_LCDWriteHexa:
   278                           
   279                           ; 1 bytes @ 0xD
   280   00000E                     	ds	2
   281   000010                     LCDWriteHexa@column:
   282                           	callstack 0
   283                           
   284                           ; 1 bytes @ 0xF
   285   000010                     	ds	1
   286   000011                     LCDWriteHexa@string:
   287                           	callstack 0
   288                           
   289                           ; 3 bytes @ 0x10
   290   000011                     	ds	3
   291   000014                     LCDWriteHexa@hexa:
   292                           	callstack 0
   293                           
   294                           ; 1 bytes @ 0x13
   295   000014                     	ds	1
   296   000015                     
   297                           ; 2 bytes @ 0x14
   298   000015                     	ds	2
   299   000017                     
   300                           ; 3 bytes @ 0x16
   301   000017                     	ds	3
   302   00001A                     ??_main:
   303                           
   304                           ; 1 bytes @ 0x19
   305   00001A                     	ds	1
   306   00001B                     main@string:
   307                           	callstack 0
   308                           
   309                           ; 16 bytes @ 0x1A
   310   00001B                     	ds	16
   311   00002B                     main@degre:
   312                           	callstack 0
   313                           
   314                           ; 2 bytes @ 0x2A
   315   00002B                     	ds	2
   316   00002D                     main@temp:
   317                           	callstack 0
   318                           
   319                           ; 1 bytes @ 0x2C
   320   00002D                     	ds	1
   321   00002E                     main@temp2:
   322                           	callstack 0
   323                           
   324                           ; 1 bytes @ 0x2D
   325   00002E                     	ds	1
   326                           
   327 ;;
   328 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   329 ;;
   330 ;; *************** function _main *****************
   331 ;; Defined at:
   332 ;;		line 91 in file "mesure_temp.c"
   333 ;; Parameters:    Size  Location     Type
   334 ;;  argc            2   20[COMRAM] int 
   335 ;;  argv            3   22[COMRAM] PTR PTR unsigned char 
   336 ;; Auto vars:     Size  Location     Type
   337 ;;  string         16   26[COMRAM] unsigned char [16]
   338 ;;  degre           2   42[COMRAM] unsigned char [2]
   339 ;;  temp2           1   45[COMRAM] unsigned char 
   340 ;;  temp            1   44[COMRAM] unsigned char 
   341 ;; Return value:  Size  Location     Type
   342 ;;                  2   20[COMRAM] int 
   343 ;; Registers used:
   344 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   345 ;; Tracked objects:
   346 ;;		On entry : 0/0
   347 ;;		On exit  : 0/0
   348 ;;		Unchanged: 0/0
   349 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   350 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   351 ;;      Locals:        20       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   352 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   353 ;;      Totals:        26       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   354 ;;Total ram usage:       26 bytes
   355 ;; Hardware stack levels required when called: 5
   356 ;; This function calls:
   357 ;;		_I2C_Write_Register
   358 ;;		_LCDClear
   359 ;;		_LCDGoto
   360 ;;		_LCDInit
   361 ;;		_LCDWriteHexa
   362 ;;		_LCDWriteStr
   363 ;;		_i2c_ACK
   364 ;;		_i2c_NAK
   365 ;;		_i2c_init
   366 ;;		_i2c_read
   367 ;;		_i2c_repStart
   368 ;;		_i2c_start
   369 ;;		_i2c_stop
   370 ;;		_i2c_write
   371 ;;		_strcpy
   372 ;; This function is called by:
   373 ;;		Startup code after reset
   374 ;; This function uses a non-reentrant model
   375 ;;
   376                           
   377                           	psect	text0
   378   001034                     __ptext0:
   379                           	callstack 0
   380   001034                     _main:
   381                           	callstack 26
   382   001034  C02F  F02B         	movff	main@F6555,main@degre
   383   001038  C030  F02C         	movff	main@F6555+1,main@degre+1
   384   00103C  EC98  F008         	call	_LCDInit	;wreg free
   385   001040  EC6A  F00A         	call	_LCDClear	;wreg free
   386   001044  ECD2  F009         	call	_i2c_init	;wreg free
   387   001048  0E06               	movlw	6
   388   00104A  6E04               	movwf	(I2C_Write_Register@value+1)^0,c
   389   00104C  0E97               	movlw	151
   390   00104E  6E03               	movwf	I2C_Write_Register@value^0,c
   391   001050  0E05               	movlw	5
   392   001052  EC37  F00A         	call	_I2C_Write_Register
   393   001056  0E11               	movlw	17
   394   001058  6E1A               	movwf	??_main^0,c
   395   00105A  0E3A               	movlw	58
   396   00105C                     u327:
   397   00105C  2EE8               	decfsz	wreg,f,c
   398   00105E  D7FE               	bra	u327
   399   001060  2E1A               	decfsz	??_main^0,f,c
   400   001062  D7FC               	bra	u327
   401   001064  D000               	nop2	
   402   001066  0E00               	movlw	0
   403   001068  6E06               	movwf	LCDGoto@row^0,c
   404   00106A  0E00               	movlw	0
   405   00106C  EC4A  F009         	call	_LCDGoto
   406   001070  0E1B               	movlw	low main@string
   407   001072  6E01               	movwf	strcpy@dest^0,c
   408   001074  0E28               	movlw	low STR_2
   409   001076  6E02               	movwf	strcpy@src^0,c
   410   001078  ECF0  F009         	call	_strcpy	;wreg free
   411   00107C  0E1B               	movlw	low main@string
   412   00107E  6E07               	movwf	LCDWriteStr@string^0,c
   413   001080  6A08               	clrf	(LCDWriteStr@string+1)^0,c
   414   001082  EC0C  F009         	call	_LCDWriteStr	;wreg free
   415   001086                     l1383:
   416   001086  0E01               	movlw	1
   417   001088  6E06               	movwf	LCDGoto@row^0,c
   418   00108A  0E00               	movlw	0
   419   00108C  EC4A  F009         	call	_LCDGoto
   420   001090  0E1D               	movlw	low STR_3
   421   001092  6E07               	movwf	LCDWriteStr@string^0,c
   422   001094  5007               	movf	LCDWriteStr@string^0,w,c
   423   001096  A4D8               	btfss	status,2,c
   424   001098  0E10               	movlw	high __smallconst
   425   00109A  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   426   00109C  EC0C  F009         	call	_LCDWriteStr	;wreg free
   427   0010A0  0EA3               	movlw	163
   428   0010A2  6E1A               	movwf	??_main^0,c
   429   0010A4  0E55               	movlw	85
   430   0010A6                     u337:
   431   0010A6  2EE8               	decfsz	wreg,f,c
   432   0010A8  D7FE               	bra	u337
   433   0010AA  2E1A               	decfsz	??_main^0,f,c
   434   0010AC  D7FC               	bra	u337
   435   0010AE  0000               	nop	
   436   0010B0  ECD1  F00A         	call	_i2c_start	;wreg free
   437   0010B4  0E80               	movlw	128
   438   0010B6  EC88  F00A         	call	_i2c_write
   439   0010BA  0E04               	movlw	4
   440   0010BC  EC88  F00A         	call	_i2c_write
   441   0010C0  ECA3  F00A         	call	_i2c_repStart	;wreg free
   442   0010C4  0E81               	movlw	129
   443   0010C6  EC88  F00A         	call	_i2c_write
   444   0010CA  EC5A  F00A         	call	_i2c_read	;wreg free
   445   0010CE  6E2D               	movwf	main@temp^0,c
   446   0010D0  ECC6  F00A         	call	_i2c_ACK	;wreg free
   447   0010D4  EC5A  F00A         	call	_i2c_read	;wreg free
   448   0010D8  6E2E               	movwf	main@temp2^0,c
   449   0010DA  ECBB  F00A         	call	_i2c_NAK	;wreg free
   450   0010DE  ECAF  F00A         	call	_i2c_stop	;wreg free
   451   0010E2  0E00               	movlw	0
   452   0010E4  6E0C               	movwf	LCDWriteHexa@row^0,c
   453   0010E6  C02D  F00D         	movff	main@temp,LCDWriteHexa@value
   454   0010EA  0E07               	movlw	7
   455   0010EC  EC7F  F009         	call	_LCDWriteHexa
   456   0010F0  0E00               	movlw	0
   457   0010F2  6E0C               	movwf	LCDWriteHexa@row^0,c
   458   0010F4  C02E  F00D         	movff	main@temp2,LCDWriteHexa@value
   459   0010F8  0E0A               	movlw	10
   460   0010FA  EC7F  F009         	call	_LCDWriteHexa
   461   0010FE  0E01               	movlw	1
   462   001100  6E06               	movwf	LCDGoto@row^0,c
   463   001102  0E00               	movlw	0
   464   001104  EC4A  F009         	call	_LCDGoto
   465   001108  0E12               	movlw	low STR_4
   466   00110A  6E07               	movwf	LCDWriteStr@string^0,c
   467   00110C  5007               	movf	LCDWriteStr@string^0,w,c
   468   00110E  A4D8               	btfss	status,2,c
   469   001110  0E10               	movlw	high __smallconst
   470   001112  6E08               	movwf	(LCDWriteStr@string+1)^0,c
   471   001114  EC0C  F009         	call	_LCDWriteStr	;wreg free
   472   001118  0EA3               	movlw	163
   473   00111A  6E1A               	movwf	??_main^0,c
   474   00111C  0E55               	movlw	85
   475   00111E                     u347:
   476   00111E  2EE8               	decfsz	wreg,f,c
   477   001120  D7FE               	bra	u347
   478   001122  2E1A               	decfsz	??_main^0,f,c
   479   001124  D7FC               	bra	u347
   480   001126  0000               	nop	
   481   001128  EF43  F008         	goto	l1383
   482   00112C  EF00  F000         	goto	start
   483   001130                     __end_of_main:
   484                           	callstack 0
   485                           
   486 ;; *************** function _strcpy *****************
   487 ;; Defined at:
   488 ;;		line 3 in file "/opt/microchip/xc8/v2.46/pic/sources/c99/common/strcpy.c"
   489 ;; Parameters:    Size  Location     Type
   490 ;;  dest            1    0[COMRAM] PTR unsigned char 
   491 ;;		 -> main@string(16), 
   492 ;;  src             1    1[COMRAM] PTR const unsigned char 
   493 ;;		 -> STR_2(10), 
   494 ;; Auto vars:     Size  Location     Type
   495 ;;  d               1    3[COMRAM] PTR unsigned char 
   496 ;;		 -> main@string(16), 
   497 ;; Return value:  Size  Location     Type
   498 ;;                  1    wreg      PTR unsigned char 
   499 ;; Registers used:
   500 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru
   501 ;; Tracked objects:
   502 ;;		On entry : 0/0
   503 ;;		On exit  : 0/0
   504 ;;		Unchanged: 0/0
   505 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   506 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   507 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   508 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   509 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   510 ;;Total ram usage:        4 bytes
   511 ;; Hardware stack levels used: 1
   512 ;; This function calls:
   513 ;;		Nothing
   514 ;; This function is called by:
   515 ;;		_main
   516 ;; This function uses a non-reentrant model
   517 ;;
   518                           
   519                           	psect	text1
   520   0013E0                     __ptext1:
   521                           	callstack 0
   522   0013E0                     _strcpy:
   523                           	callstack 30
   524   0013E0  C001  F004         	movff	strcpy@dest,strcpy@d
   525   0013E4                     l1335:
   526   0013E4  2A02               	incf	strcpy@src^0,f,c
   527   0013E6  0402               	decf	strcpy@src^0,w,c
   528   0013E8  6E03               	movwf	??_strcpy^0,c
   529   0013EA  C003  FFF6         	movff	??_strcpy,tblptrl
   530   0013EE                     	if	1	;There is more than 1 active tblptr byte
   531   0013EE  0E10               	movlw	high __smallconst
   532   0013F0  6EF7               	movwf	tblptrh,c
   533   0013F2                     	endif
   534   0013F2                     	if	0	;tblptru may be non-zero
   535   0013F2                     	endif
   536   0013F2                     	if	0	;tblptru may be non-zero
   537   0013F2                     	endif
   538   0013F2  2A04               	incf	strcpy@d^0,f,c
   539   0013F4  0404               	decf	strcpy@d^0,w,c
   540   0013F6  6ED9               	movwf	fsr2l,c
   541   0013F8  6ADA               	clrf	fsr2h,c
   542   0013FA  0008               	tblrd		*
   543   0013FC  CFF5 FFDF          	movff	tablat,indf2
   544   001400  50DF               	movf	indf2,w,c
   545   001402  A4D8               	btfss	status,2,c
   546   001404  EF06  F00A         	goto	u301
   547   001408  EF08  F00A         	goto	u300
   548   00140C                     u301:
   549   00140C  EFF2  F009         	goto	l1335
   550   001410                     u300:
   551   001410  0012               	return		;funcret
   552   001412                     __end_of_strcpy:
   553                           	callstack 0
   554                           
   555 ;; *************** function _i2c_repStart *****************
   556 ;; Defined at:
   557 ;;		line 59 in file "i2c.c"
   558 ;; Parameters:    Size  Location     Type
   559 ;;		None
   560 ;; Auto vars:     Size  Location     Type
   561 ;;		None
   562 ;; Return value:  Size  Location     Type
   563 ;;                  1    wreg      void 
   564 ;; Registers used:
   565 ;;		wreg, status,2, status,0, cstack
   566 ;; Tracked objects:
   567 ;;		On entry : 0/0
   568 ;;		On exit  : 0/0
   569 ;;		Unchanged: 0/0
   570 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   571 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   572 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   573 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   574 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   575 ;;Total ram usage:        0 bytes
   576 ;; Hardware stack levels used: 1
   577 ;; Hardware stack levels required when called: 1
   578 ;; This function calls:
   579 ;;		_i2c_waitForIdle
   580 ;; This function is called by:
   581 ;;		_main
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585                           	psect	text2
   586   001546                     __ptext2:
   587                           	callstack 0
   588   001546                     _i2c_repStart:
   589                           	callstack 29
   590   001546                     
   591                           ;i2c.c: 61:     i2c_waitForIdle();
   592   001546  EC21  F00A         	call	_i2c_waitForIdle	;wreg free
   593   00154A                     
   594                           ;i2c.c: 63:     PIR1bits.SSP1IF = 0;
   595   00154A  969E               	bcf	158,3,c	;volatile
   596   00154C                     
   597                           ;i2c.c: 64:     SSP1CON2bits.RSEN = 1;
   598   00154C  82C5               	bsf	197,1,c	;volatile
   599   00154E                     l44:
   600   00154E  A69E               	btfss	158,3,c	;volatile
   601   001550  EFAC  F00A         	goto	u151
   602   001554  EFAE  F00A         	goto	u150
   603   001558                     u151:
   604   001558  EFA7  F00A         	goto	l44
   605   00155C                     u150:
   606   00155C  0012               	return		;funcret
   607   00155E                     __end_of_i2c_repStart:
   608                           	callstack 0
   609                           
   610 ;; *************** function _i2c_read *****************
   611 ;; Defined at:
   612 ;;		line 92 in file "i2c.c"
   613 ;; Parameters:    Size  Location     Type
   614 ;;		None
   615 ;; Auto vars:     Size  Location     Type
   616 ;;  i2cReadData     1    1[COMRAM] unsigned char 
   617 ;; Return value:  Size  Location     Type
   618 ;;                  1    wreg      unsigned char 
   619 ;; Registers used:
   620 ;;		wreg, status,2, status,0, cstack
   621 ;; Tracked objects:
   622 ;;		On entry : 0/0
   623 ;;		On exit  : 0/0
   624 ;;		Unchanged: 0/0
   625 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   627 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   628 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   630 ;;Total ram usage:        1 bytes
   631 ;; Hardware stack levels used: 1
   632 ;; Hardware stack levels required when called: 1
   633 ;; This function calls:
   634 ;;		_i2c_waitForIdle
   635 ;; This function is called by:
   636 ;;		_main
   637 ;; This function uses a non-reentrant model
   638 ;;
   639                           
   640                           	psect	text3
   641   0014B4                     __ptext3:
   642                           	callstack 0
   643   0014B4                     _i2c_read:
   644                           	callstack 29
   645   0014B4                     
   646                           ;i2c.c: 95:     i2c_waitForIdle();
   647   0014B4  EC21  F00A         	call	_i2c_waitForIdle	;wreg free
   648   0014B8                     
   649                           ;i2c.c: 97:     PIR1bits.SSP1IF = 0;
   650   0014B8  969E               	bcf	158,3,c	;volatile
   651   0014BA                     
   652                           ;i2c.c: 98:     SSP1CON2bits.RCEN = 1;
   653   0014BA  86C5               	bsf	197,3,c	;volatile
   654   0014BC                     l68:
   655   0014BC  A0C7               	btfss	199,0,c	;volatile
   656   0014BE  EF63  F00A         	goto	u181
   657   0014C2  EF65  F00A         	goto	u180
   658   0014C6                     u181:
   659   0014C6  EF5E  F00A         	goto	l68
   660   0014CA                     u180:
   661   0014CA                     
   662                           ;i2c.c: 101:     PIR1bits.SSP1IF = 0;
   663   0014CA  969E               	bcf	158,3,c	;volatile
   664                           
   665                           ;i2c.c: 102:     i2cReadData = SSP1BUF;
   666   0014CC  CFC9 F002          	movff	4041,i2c_read@i2cReadData	;volatile
   667   0014D0                     
   668                           ;i2c.c: 103:     return i2cReadData;
   669   0014D0  5002               	movf	i2c_read@i2cReadData^0,w,c
   670   0014D2  0012               	return		;funcret
   671   0014D4                     __end_of_i2c_read:
   672                           	callstack 0
   673                           
   674 ;; *************** function _i2c_init *****************
   675 ;; Defined at:
   676 ;;		line 16 in file "i2c.c"
   677 ;; Parameters:    Size  Location     Type
   678 ;;		None
   679 ;; Auto vars:     Size  Location     Type
   680 ;;		None
   681 ;; Return value:  Size  Location     Type
   682 ;;                  1    wreg      void 
   683 ;; Registers used:
   684 ;;		wreg, status,2
   685 ;; Tracked objects:
   686 ;;		On entry : 0/0
   687 ;;		On exit  : 0/0
   688 ;;		Unchanged: 0/0
   689 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   690 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   691 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   692 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   693 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   694 ;;Total ram usage:        0 bytes
   695 ;; Hardware stack levels used: 1
   696 ;; This function calls:
   697 ;;		Nothing
   698 ;; This function is called by:
   699 ;;		_main
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703                           	psect	text4
   704   0013A4                     __ptext4:
   705                           	callstack 0
   706   0013A4                     _i2c_init:
   707                           	callstack 30
   708   0013A4                     
   709                           ;i2c.c: 18:     TRISCbits.TRISC3 = 1;
   710   0013A4  8694               	bsf	148,3,c	;volatile
   711                           
   712                           ;i2c.c: 19:     TRISCbits.TRISC4 = 1;
   713   0013A6  8894               	bsf	148,4,c	;volatile
   714                           
   715                           ;i2c.c: 20:     ANSELCbits.ANSC3 = 0;
   716   0013A8  010F               	movlb	15	; () banked
   717   0013AA  973A               	bcf	58,3,b	;volatile
   718                           
   719                           ;i2c.c: 21:     ANSELCbits.ANSC4 = 0;
   720   0013AC  993A               	bcf	58,4,b	;volatile
   721   0013AE                     
   722                           ; BSR set to: 15
   723                           ;i2c.c: 23:     SSP1CON1 = 0b00101000;
   724   0013AE  0E28               	movlw	40
   725   0013B0  6EC6               	movwf	198,c	;volatile
   726   0013B2                     
   727                           ; BSR set to: 15
   728                           ;i2c.c: 24:     __nop();
   729   0013B2  0000               	nop	
   730   0013B4                     
   731                           ;i2c.c: 25:     __nop();
   732   0013B4  0000               	nop	
   733   0013B6                     
   734                           ;i2c.c: 26:     __nop();
   735   0013B6  0000               	nop	
   736                           
   737                           ;i2c.c: 28:     SSP1ADD = 4;
   738   0013B8  0E04               	movlw	4
   739   0013BA  6EC8               	movwf	200,c	;volatile
   740   0013BC                     
   741                           ;i2c.c: 29:     __nop();
   742   0013BC  0000               	nop	
   743   0013BE                     
   744                           ;i2c.c: 30:     __nop();
   745   0013BE  0000               	nop	
   746   0013C0                     
   747                           ;i2c.c: 31:     __nop();
   748   0013C0  0000               	nop	
   749   0013C2                     
   750                           ;i2c.c: 32:     SSP1STATbits.SMP = 1;
   751   0013C2  8EC7               	bsf	199,7,c	;volatile
   752   0013C4                     
   753                           ;i2c.c: 33:     SSP1STATbits.CKE = 1;
   754   0013C4  8CC7               	bsf	199,6,c	;volatile
   755   0013C6                     
   756                           ;i2c.c: 34:     SSP1CON3bits.SCIE = 0;
   757   0013C6  9ACB               	bcf	203,5,c	;volatile
   758   0013C8                     
   759                           ;i2c.c: 35:     SSP1CON3bits.PCIE = 0;
   760   0013C8  9CCB               	bcf	203,6,c	;volatile
   761   0013CA                     
   762                           ;i2c.c: 38:     PIR1bits.SSP1IF = 0;
   763   0013CA  969E               	bcf	158,3,c	;volatile
   764   0013CC                     
   765                           ;i2c.c: 39:     PIR2bits.BCL1IF = 0;
   766   0013CC  96A1               	bcf	161,3,c	;volatile
   767                           
   768                           ;i2c.c: 40:     SSP1CON1 = 0b00101000;
   769   0013CE  0E28               	movlw	40
   770   0013D0  6EC6               	movwf	198,c	;volatile
   771                           
   772                           ;i2c.c: 41:     SSP1CON2 = 0;
   773   0013D2  0E00               	movlw	0
   774   0013D4  6EC5               	movwf	197,c	;volatile
   775                           
   776                           ;i2c.c: 42:     SSP1ADD = (1000000UL / (4 * 100000)) - 1;
   777   0013D6  0E01               	movlw	1
   778   0013D8  6EC8               	movwf	200,c	;volatile
   779                           
   780                           ;i2c.c: 43:     SSP1STAT = 0;
   781   0013DA  0E00               	movlw	0
   782   0013DC  6EC7               	movwf	199,c	;volatile
   783   0013DE  0012               	return		;funcret
   784   0013E0                     __end_of_i2c_init:
   785                           	callstack 0
   786                           
   787 ;; *************** function _i2c_NAK *****************
   788 ;; Defined at:
   789 ;;		line 84 in file "i2c.c"
   790 ;; Parameters:    Size  Location     Type
   791 ;;		None
   792 ;; Auto vars:     Size  Location     Type
   793 ;;		None
   794 ;; Return value:  Size  Location     Type
   795 ;;                  1    wreg      void 
   796 ;; Registers used:
   797 ;;		None
   798 ;; Tracked objects:
   799 ;;		On entry : 0/0
   800 ;;		On exit  : 0/0
   801 ;;		Unchanged: 0/0
   802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   803 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   804 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   805 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   806 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   807 ;;Total ram usage:        0 bytes
   808 ;; Hardware stack levels used: 1
   809 ;; This function calls:
   810 ;;		Nothing
   811 ;; This function is called by:
   812 ;;		_main
   813 ;; This function uses a non-reentrant model
   814 ;;
   815                           
   816                           	psect	text5
   817   001576                     __ptext5:
   818                           	callstack 0
   819   001576                     _i2c_NAK:
   820                           	callstack 30
   821   001576                     
   822                           ;i2c.c: 86:     PIR1bits.SSP1IF = 0;
   823   001576  969E               	bcf	158,3,c	;volatile
   824                           
   825                           ;i2c.c: 87:     SSP1CON2bits.ACKDT = 1;
   826   001578  8AC5               	bsf	197,5,c	;volatile
   827                           
   828                           ;i2c.c: 88:     SSP1CON2bits.ACKEN = 1;
   829   00157A  88C5               	bsf	197,4,c	;volatile
   830   00157C                     l62:
   831   00157C  A69E               	btfss	158,3,c	;volatile
   832   00157E  EFC3  F00A         	goto	u171
   833   001582  EFC5  F00A         	goto	u170
   834   001586                     u171:
   835   001586  EFBE  F00A         	goto	l62
   836   00158A                     u170:
   837   00158A  0012               	return		;funcret
   838   00158C                     __end_of_i2c_NAK:
   839                           	callstack 0
   840                           
   841 ;; *************** function _i2c_ACK *****************
   842 ;; Defined at:
   843 ;;		line 77 in file "i2c.c"
   844 ;; Parameters:    Size  Location     Type
   845 ;;		None
   846 ;; Auto vars:     Size  Location     Type
   847 ;;		None
   848 ;; Return value:  Size  Location     Type
   849 ;;                  1    wreg      void 
   850 ;; Registers used:
   851 ;;		None
   852 ;; Tracked objects:
   853 ;;		On entry : 0/0
   854 ;;		On exit  : 0/0
   855 ;;		Unchanged: 0/0
   856 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   857 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   858 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   859 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   860 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   861 ;;Total ram usage:        0 bytes
   862 ;; Hardware stack levels used: 1
   863 ;; This function calls:
   864 ;;		Nothing
   865 ;; This function is called by:
   866 ;;		_main
   867 ;; This function uses a non-reentrant model
   868 ;;
   869                           
   870                           	psect	text6
   871   00158C                     __ptext6:
   872                           	callstack 0
   873   00158C                     _i2c_ACK:
   874                           	callstack 30
   875   00158C                     
   876                           ;i2c.c: 79:     PIR1bits.SSP1IF = 0;
   877   00158C  969E               	bcf	158,3,c	;volatile
   878                           
   879                           ;i2c.c: 80:     SSP1CON2bits.ACKDT= 0;
   880   00158E  9AC5               	bcf	197,5,c	;volatile
   881                           
   882                           ;i2c.c: 81:     SSP1CON2bits.ACKEN = 1;
   883   001590  88C5               	bsf	197,4,c	;volatile
   884   001592                     l56:
   885   001592  A69E               	btfss	158,3,c	;volatile
   886   001594  EFCE  F00A         	goto	u161
   887   001598  EFD0  F00A         	goto	u160
   888   00159C                     u161:
   889   00159C  EFC9  F00A         	goto	l56
   890   0015A0                     u160:
   891   0015A0  0012               	return		;funcret
   892   0015A2                     __end_of_i2c_ACK:
   893                           	callstack 0
   894                           
   895 ;; *************** function _LCDWriteHexa *****************
   896 ;; Defined at:
   897 ;;		line 201 in file "lcd.c"
   898 ;; Parameters:    Size  Location     Type
   899 ;;  column          1    wreg     unsigned char 
   900 ;;  row             1   11[COMRAM] unsigned char 
   901 ;;  value           1   12[COMRAM] unsigned char 
   902 ;; Auto vars:     Size  Location     Type
   903 ;;  column          1   15[COMRAM] unsigned char 
   904 ;;  string          3   16[COMRAM] unsigned char [3]
   905 ;;  hexa            1   19[COMRAM] PTR unsigned char 
   906 ;;		 -> STR_1(17), 
   907 ;; Return value:  Size  Location     Type
   908 ;;                  1    wreg      void 
   909 ;; Registers used:
   910 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
   911 ;; Tracked objects:
   912 ;;		On entry : 0/0
   913 ;;		On exit  : 0/0
   914 ;;		Unchanged: 0/0
   915 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
   916 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   917 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   918 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   919 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
   920 ;;Total ram usage:        9 bytes
   921 ;; Hardware stack levels used: 1
   922 ;; Hardware stack levels required when called: 4
   923 ;; This function calls:
   924 ;;		_LCDGoto
   925 ;;		_LCDWriteStr
   926 ;; This function is called by:
   927 ;;		_main
   928 ;; This function uses a non-reentrant model
   929 ;;
   930                           
   931                           	psect	text7
   932   0012FE                     __ptext7:
   933                           	callstack 0
   934   0012FE                     _LCDWriteHexa:
   935                           	callstack 26
   936                           
   937                           ;incstack = 0
   938                           ;LCDWriteHexa@column stored from wreg
   939   0012FE  6E10               	movwf	LCDWriteHexa@column^0,c
   940   001300                     
   941                           ;lcd.c: 202:     char *hexa = "0123456789ABCDEF";
   942   001300  0E01               	movlw	low STR_1
   943   001302  6E14               	movwf	LCDWriteHexa@hexa^0,c
   944   001304                     
   945                           ;lcd.c: 203:     char string [3];;lcd.c: 205:     string[0] = hexa[value >> 4];
   946   001304  C00D  F00E         	movff	LCDWriteHexa@value,??_LCDWriteHexa
   947   001308  3A0E               	swapf	??_LCDWriteHexa^0,f,c
   948   00130A  0E0F               	movlw	15
   949   00130C  160E               	andwf	??_LCDWriteHexa^0,f,c
   950   00130E  5014               	movf	LCDWriteHexa@hexa^0,w,c
   951   001310  240E               	addwf	??_LCDWriteHexa^0,w,c
   952   001312  6E0F               	movwf	(??_LCDWriteHexa+1)^0,c
   953   001314  C00F  FFF6         	movff	??_LCDWriteHexa+1,tblptrl
   954   001318                     	if	1	;There is more than 1 active tblptr byte
   955   001318  0E10               	movlw	high __smallconst
   956   00131A  6EF7               	movwf	tblptrh,c
   957   00131C                     	endif
   958   00131C                     	if	0	;tblptru may be non-zero
   959   00131C                     	endif
   960   00131C                     	if	0	;tblptru may be non-zero
   961   00131C                     	endif
   962   00131C  0008               	tblrd		*
   963   00131E  CFF5 F011          	movff	tablat,LCDWriteHexa@string
   964   001322                     
   965                           ;lcd.c: 206:     string[1] = hexa[value & 0x0F];
   966   001322  C00D  F00E         	movff	LCDWriteHexa@value,??_LCDWriteHexa
   967   001326  0E0F               	movlw	15
   968   001328  160E               	andwf	??_LCDWriteHexa^0,f,c
   969   00132A  5014               	movf	LCDWriteHexa@hexa^0,w,c
   970   00132C  240E               	addwf	??_LCDWriteHexa^0,w,c
   971   00132E  6E0F               	movwf	(??_LCDWriteHexa+1)^0,c
   972   001330  C00F  FFF6         	movff	??_LCDWriteHexa+1,tblptrl
   973   001334                     	if	1	;There is more than 1 active tblptr byte
   974   001334  0E10               	movlw	high __smallconst
   975   001336  6EF7               	movwf	tblptrh,c
   976   001338                     	endif
   977   001338                     	if	0	;tblptru may be non-zero
   978   001338                     	endif
   979   001338                     	if	0	;tblptru may be non-zero
   980   001338                     	endif
   981   001338  0008               	tblrd		*
   982   00133A  CFF5 F012          	movff	tablat,LCDWriteHexa@string+1
   983   00133E                     
   984                           ;lcd.c: 207:     string[2] = '\0';
   985   00133E  0E00               	movlw	0
   986   001340  6E13               	movwf	(LCDWriteHexa@string+2)^0,c
   987   001342                     
   988                           ;lcd.c: 209:     LCDGoto(column, row);
   989   001342  C00C  F006         	movff	LCDWriteHexa@row,LCDGoto@row
   990   001346  5010               	movf	LCDWriteHexa@column^0,w,c
   991   001348  EC4A  F009         	call	_LCDGoto
   992   00134C                     
   993                           ;lcd.c: 210:     LCDWriteStr(string);
   994   00134C  0E11               	movlw	low LCDWriteHexa@string
   995   00134E  6E07               	movwf	LCDWriteStr@string^0,c
   996   001350  6A08               	clrf	(LCDWriteStr@string+1)^0,c
   997   001352  EC0C  F009         	call	_LCDWriteStr	;wreg free
   998   001356  0012               	return		;funcret
   999   001358                     __end_of_LCDWriteHexa:
  1000                           	callstack 0
  1001                           
  1002 ;; *************** function _LCDWriteStr *****************
  1003 ;; Defined at:
  1004 ;;		line 193 in file "lcd.c"
  1005 ;; Parameters:    Size  Location     Type
  1006 ;;  string          2    6[COMRAM] PTR const unsigned char 
  1007 ;;		 -> STR_4(11), STR_3(11), main@string(16), LCDWriteInt@string(3), 
  1008 ;;		 -> LCDWriteFloat@string(5), LCDWriteHexa@string(3), 
  1009 ;; Auto vars:     Size  Location     Type
  1010 ;;  i               1   10[COMRAM] unsigned char 
  1011 ;; Return value:  Size  Location     Type
  1012 ;;                  1    wreg      void 
  1013 ;; Registers used:
  1014 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  1015 ;; Tracked objects:
  1016 ;;		On entry : 0/0
  1017 ;;		On exit  : 0/0
  1018 ;;		Unchanged: 0/0
  1019 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1020 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1021 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1022 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1023 ;;      Totals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1024 ;;Total ram usage:        5 bytes
  1025 ;; Hardware stack levels used: 1
  1026 ;; Hardware stack levels required when called: 3
  1027 ;; This function calls:
  1028 ;;		_LCDPutChar
  1029 ;; This function is called by:
  1030 ;;		_LCDWriteHexa
  1031 ;;		_main
  1032 ;;		_LCDWriteFloat
  1033 ;;		_LCDWriteInt
  1034 ;; This function uses a non-reentrant model
  1035 ;;
  1036                           
  1037                           	psect	text8
  1038   001218                     __ptext8:
  1039                           	callstack 0
  1040   001218                     _LCDWriteStr:
  1041                           	callstack 27
  1042   001218                     
  1043                           ;lcd.c: 193: void LCDWriteStr(const char *string);lcd.c: 194: {;lcd.c: 195:   UINT8_T i 
      +                          = 0;
  1044   001218  0E00               	movlw	0
  1045   00121A  6E0B               	movwf	LCDWriteStr@i^0,c
  1046                           
  1047                           ;lcd.c: 197:   while (string[i])
  1048   00121C  EF2A  F009         	goto	l1255
  1049   001220                     l1251:
  1050                           
  1051                           ;lcd.c: 198:     LCDPutChar(string[i++]);
  1052   001220  500B               	movf	LCDWriteStr@i^0,w,c
  1053   001222  2407               	addwf	LCDWriteStr@string^0,w,c
  1054   001224  6E09               	movwf	??_LCDWriteStr^0,c
  1055   001226  0E00               	movlw	0
  1056   001228  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1057   00122A  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1058   00122C  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1059   001230  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1060   001234  0E00               	movlw	low (__smallconst shr (0+16))
  1061   001236  6EF8               	movwf	tblptru,c
  1062   001238  0E0F               	movlw	(high __ramtop+-1)
  1063   00123A  64F7               	cpfsgt	tblptrh,c
  1064   00123C  D003               	bra	u277
  1065   00123E  0008               	tblrd		*
  1066   001240  50F5               	movf	tablat,w,c
  1067   001242  D005               	bra	u270
  1068   001244                     u277:
  1069   001244  CFF6 FFE9          	movff	tblptrl,fsr0l
  1070   001248  CFF7 FFEA          	movff	tblptrh,fsr0h
  1071   00124C  50EF               	movf	indf0,w,c
  1072   00124E                     u270:
  1073   00124E  ECDB  F00A         	call	_LCDPutChar
  1074   001252  2A0B               	incf	LCDWriteStr@i^0,f,c
  1075   001254                     l1255:
  1076                           
  1077                           ;lcd.c: 197:   while (string[i])
  1078   001254  500B               	movf	LCDWriteStr@i^0,w,c
  1079   001256  2407               	addwf	LCDWriteStr@string^0,w,c
  1080   001258  6E09               	movwf	??_LCDWriteStr^0,c
  1081   00125A  0E00               	movlw	0
  1082   00125C  2008               	addwfc	(LCDWriteStr@string+1)^0,w,c
  1083   00125E  6E0A               	movwf	(??_LCDWriteStr+1)^0,c
  1084   001260  C009  FFF6         	movff	??_LCDWriteStr,tblptrl
  1085   001264  C00A  FFF7         	movff	??_LCDWriteStr+1,tblptrh
  1086   001268  0E00               	movlw	low (__smallconst shr (0+16))
  1087   00126A  6EF8               	movwf	tblptru,c
  1088   00126C  0E0F               	movlw	(high __ramtop+-1)
  1089   00126E  64F7               	cpfsgt	tblptrh,c
  1090   001270  D003               	bra	u287
  1091   001272  0008               	tblrd		*
  1092   001274  50F5               	movf	tablat,w,c
  1093   001276  D005               	bra	u280
  1094   001278                     u287:
  1095   001278  CFF6 FFE9          	movff	tblptrl,fsr0l
  1096   00127C  CFF7 FFEA          	movff	tblptrh,fsr0h
  1097   001280  50EF               	movf	indf0,w,c
  1098   001282                     u280:
  1099   001282  0900               	iorlw	0
  1100   001284  A4D8               	btfss	status,2,c
  1101   001286  EF47  F009         	goto	u291
  1102   00128A  EF49  F009         	goto	u290
  1103   00128E                     u291:
  1104   00128E  EF10  F009         	goto	l1251
  1105   001292                     u290:
  1106   001292  0012               	return		;funcret
  1107   001294                     __end_of_LCDWriteStr:
  1108                           	callstack 0
  1109                           
  1110 ;; *************** function _LCDPutChar *****************
  1111 ;; Defined at:
  1112 ;;		line 181 in file "lcd.c"
  1113 ;; Parameters:    Size  Location     Type
  1114 ;;  data            1    wreg     unsigned char 
  1115 ;; Auto vars:     Size  Location     Type
  1116 ;;  data            1    5[COMRAM] unsigned char 
  1117 ;; Return value:  Size  Location     Type
  1118 ;;                  1    wreg      void 
  1119 ;; Registers used:
  1120 ;;		wreg, status,2, status,0, cstack
  1121 ;; Tracked objects:
  1122 ;;		On entry : 0/0
  1123 ;;		On exit  : 0/0
  1124 ;;		Unchanged: 0/0
  1125 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1126 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1127 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1128 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1129 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1130 ;;Total ram usage:        1 bytes
  1131 ;; Hardware stack levels used: 1
  1132 ;; Hardware stack levels required when called: 2
  1133 ;; This function calls:
  1134 ;;		_WaitLCD
  1135 ;;		_WriteByte
  1136 ;; This function is called by:
  1137 ;;		_LCDWriteStr
  1138 ;;		_LCDPutByte
  1139 ;; This function uses a non-reentrant model
  1140 ;;
  1141                           
  1142                           	psect	text9
  1143   0015B6                     __ptext9:
  1144                           	callstack 0
  1145   0015B6                     _LCDPutChar:
  1146                           	callstack 27
  1147                           
  1148                           ;incstack = 0
  1149                           ;LCDPutChar@data stored from wreg
  1150   0015B6  6E06               	movwf	LCDPutChar@data^0,c
  1151   0015B8                     
  1152                           ;lcd.c: 181: void LCDPutChar(UINT8_T data);lcd.c: 182: {;lcd.c: 183:     WriteByte(0, da
      +                          ta);
  1153   0015B8  C006  F004         	movff	LCDPutChar@data,WriteByte@data
  1154   0015BC  0E00               	movlw	0
  1155   0015BE  EC96  F00A         	call	_WriteByte
  1156                           
  1157                           ;lcd.c: 184:     WaitLCD();
  1158   0015C2  EC7A  F00A         	call	_WaitLCD	;wreg free
  1159   0015C6  0012               	return		;funcret
  1160   0015C8                     __end_of_LCDPutChar:
  1161                           	callstack 0
  1162                           
  1163 ;; *************** function _LCDGoto *****************
  1164 ;; Defined at:
  1165 ;;		line 172 in file "lcd.c"
  1166 ;; Parameters:    Size  Location     Type
  1167 ;;  column          1    wreg     unsigned char 
  1168 ;;  row             1    5[COMRAM] unsigned char 
  1169 ;; Auto vars:     Size  Location     Type
  1170 ;;  column          1   10[COMRAM] unsigned char 
  1171 ;; Return value:  Size  Location     Type
  1172 ;;                  1    wreg      void 
  1173 ;; Registers used:
  1174 ;;		wreg, status,2, status,0, cstack
  1175 ;; Tracked objects:
  1176 ;;		On entry : 0/0
  1177 ;;		On exit  : 0/0
  1178 ;;		Unchanged: 0/0
  1179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1180 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1181 ;;      Locals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1182 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1183 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1184 ;;Total ram usage:        6 bytes
  1185 ;; Hardware stack levels used: 1
  1186 ;; Hardware stack levels required when called: 2
  1187 ;; This function calls:
  1188 ;;		_WaitLCD
  1189 ;;		_WriteByte
  1190 ;; This function is called by:
  1191 ;;		_LCDWriteHexa
  1192 ;;		_main
  1193 ;;		_LCDWriteFloat
  1194 ;;		_LCDWriteInt
  1195 ;; This function uses a non-reentrant model
  1196 ;;
  1197                           
  1198                           	psect	text10
  1199   001294                     __ptext10:
  1200                           	callstack 0
  1201   001294                     _LCDGoto:
  1202                           	callstack 27
  1203                           
  1204                           ;incstack = 0
  1205                           ;LCDGoto@column stored from wreg
  1206   001294  6E0B               	movwf	LCDGoto@column^0,c
  1207   001296                     
  1208                           ;lcd.c: 172: void LCDGoto(UINT8_T column, UINT8_T row);lcd.c: 173: {;lcd.c: 174:     if 
      +                          ((row > (2 - 1)) || (column > (16 - 1)))
  1209   001296  0E02               	movlw	2
  1210   001298  6006               	cpfslt	LCDGoto@row^0,c
  1211   00129A  EF51  F009         	goto	u241
  1212   00129E  EF53  F009         	goto	u240
  1213   0012A2                     u241:
  1214   0012A2  EF7E  F009         	goto	l115
  1215   0012A6                     u240:
  1216   0012A6  0E0F               	movlw	15
  1217   0012A8  640B               	cpfsgt	LCDGoto@column^0,c
  1218   0012AA  EF59  F009         	goto	u251
  1219   0012AE  EF5B  F009         	goto	u250
  1220   0012B2                     u251:
  1221   0012B2  EF5D  F009         	goto	l1239
  1222   0012B6                     u250:
  1223   0012B6  EF7E  F009         	goto	l115
  1224   0012BA                     l1239:
  1225                           
  1226                           ;lcd.c: 177:     WriteByte(1, (row == 1) ? (0xC0 | column) : (0x80 | column));
  1227   0012BA  0406               	decf	LCDGoto@row^0,w,c
  1228   0012BC  B4D8               	btfsc	status,2,c
  1229   0012BE  EF63  F009         	goto	u261
  1230   0012C2  EF65  F009         	goto	u260
  1231   0012C6                     u261:
  1232   0012C6  EF6F  F009         	goto	l1243
  1233   0012CA                     u260:
  1234   0012CA  0E80               	movlw	128
  1235   0012CC  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1236   0012D0  6A08               	clrf	(??_LCDGoto+1)^0,c
  1237   0012D2  1007               	iorwf	??_LCDGoto^0,w,c
  1238   0012D4  6E09               	movwf	_LCDGoto$623^0,c
  1239   0012D6  5008               	movf	(??_LCDGoto+1)^0,w,c
  1240   0012D8  6E0A               	movwf	(_LCDGoto$623+1)^0,c
  1241   0012DA  EF77  F009         	goto	l1245
  1242   0012DE                     l1243:
  1243   0012DE  0EC0               	movlw	192
  1244   0012E0  C00B  F007         	movff	LCDGoto@column,??_LCDGoto
  1245   0012E4  6A08               	clrf	(??_LCDGoto+1)^0,c
  1246   0012E6  1007               	iorwf	??_LCDGoto^0,w,c
  1247   0012E8  6E09               	movwf	_LCDGoto$623^0,c
  1248   0012EA  5008               	movf	(??_LCDGoto+1)^0,w,c
  1249   0012EC  6E0A               	movwf	(_LCDGoto$623+1)^0,c
  1250   0012EE                     l1245:
  1251   0012EE  C009  F004         	movff	_LCDGoto$623,WriteByte@data
  1252   0012F2  0E01               	movlw	1
  1253   0012F4  EC96  F00A         	call	_WriteByte
  1254   0012F8                     
  1255                           ;lcd.c: 178:     WaitLCD();
  1256   0012F8  EC7A  F00A         	call	_WaitLCD	;wreg free
  1257   0012FC                     l115:
  1258   0012FC  0012               	return		;funcret
  1259   0012FE                     __end_of_LCDGoto:
  1260                           	callstack 0
  1261                           
  1262 ;; *************** function _LCDInit *****************
  1263 ;; Defined at:
  1264 ;;		line 90 in file "lcd.c"
  1265 ;; Parameters:    Size  Location     Type
  1266 ;;		None
  1267 ;; Auto vars:     Size  Location     Type
  1268 ;;		None
  1269 ;; Return value:  Size  Location     Type
  1270 ;;                  1    wreg      void 
  1271 ;; Registers used:
  1272 ;;		wreg, status,2, status,0, cstack
  1273 ;; Tracked objects:
  1274 ;;		On entry : 0/0
  1275 ;;		On exit  : 0/0
  1276 ;;		Unchanged: 0/0
  1277 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1278 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1279 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1280 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1281 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1282 ;;Total ram usage:        1 bytes
  1283 ;; Hardware stack levels used: 1
  1284 ;; Hardware stack levels required when called: 2
  1285 ;; This function calls:
  1286 ;;		_WaitLCD
  1287 ;;		_WriteNibble
  1288 ;; This function is called by:
  1289 ;;		_main
  1290 ;; This function uses a non-reentrant model
  1291 ;;
  1292                           
  1293                           	psect	text11
  1294   001130                     __ptext11:
  1295                           	callstack 0
  1296   001130                     _LCDInit:
  1297                           	callstack 28
  1298   001130                     
  1299                           ;lcd.c: 92:     TRISDbits.TRISD7 = 0;
  1300   001130  9E95               	bcf	149,7,c	;volatile
  1301                           
  1302                           ;lcd.c: 93:     TRISDbits.TRISD6 = 0;
  1303   001132  9C95               	bcf	149,6,c	;volatile
  1304                           
  1305                           ;lcd.c: 94:     TRISDbits.TRISD5 = 0;
  1306   001134  9A95               	bcf	149,5,c	;volatile
  1307                           
  1308                           ;lcd.c: 95:     TRISDbits.TRISD4 = 0;
  1309   001136  9895               	bcf	149,4,c	;volatile
  1310                           
  1311                           ;lcd.c: 96:     TRISDbits.TRISD0 = 0;
  1312   001138  9095               	bcf	149,0,c	;volatile
  1313                           
  1314                           ;lcd.c: 97:     TRISDbits.TRISD1 = 0;
  1315   00113A  9295               	bcf	149,1,c	;volatile
  1316                           
  1317                           ;lcd.c: 98:     TRISDbits.TRISD2 = 0;
  1318   00113C  9495               	bcf	149,2,c	;volatile
  1319                           
  1320                           ;lcd.c: 99:     TRISDbits.TRISD3 = 0;
  1321   00113E  9695               	bcf	149,3,c	;volatile
  1322                           
  1323                           ;lcd.c: 137:     LATDbits.LATD7 = 1;
  1324   001140  8E8C               	bsf	140,7,c	;volatile
  1325   001142                     
  1326                           ;lcd.c: 138:     _delay(30000);
  1327   001142  0E27               	movlw	39
  1328   001144  6E04               	movwf	??_LCDInit^0,c
  1329   001146  0EF5               	movlw	245
  1330   001148                     u357:
  1331   001148  2EE8               	decfsz	wreg,f,c
  1332   00114A  D7FE               	bra	u357
  1333   00114C  2E04               	decfsz	??_LCDInit^0,f,c
  1334   00114E  D7FC               	bra	u357
  1335   001150  0000               	nop	
  1336   001152                     
  1337                           ;lcd.c: 139:     WriteNibble(1, 0x03);
  1338   001152  0E03               	movlw	3
  1339   001154  6E01               	movwf	WriteNibble@data^0,c
  1340   001156  0E01               	movlw	1
  1341   001158  ECAC  F009         	call	_WriteNibble
  1342   00115C                     
  1343                           ;lcd.c: 140:     _delay(3000);
  1344   00115C  0E04               	movlw	4
  1345   00115E  6E04               	movwf	??_LCDInit^0,c
  1346   001160  0EE4               	movlw	228
  1347   001162                     u367:
  1348   001162  2EE8               	decfsz	wreg,f,c
  1349   001164  D7FE               	bra	u367
  1350   001166  2E04               	decfsz	??_LCDInit^0,f,c
  1351   001168  D7FC               	bra	u367
  1352   00116A  D000               	nop2	
  1353                           
  1354                           ;lcd.c: 141:     WriteNibble(1, 0x03);
  1355   00116C  0E03               	movlw	3
  1356   00116E  6E01               	movwf	WriteNibble@data^0,c
  1357   001170  0E01               	movlw	1
  1358   001172  ECAC  F009         	call	_WriteNibble
  1359   001176                     
  1360                           ;lcd.c: 142:     _delay(100);
  1361   001176  0E21               	movlw	33
  1362   001178                     u377:
  1363   001178  2EE8               	decfsz	wreg,f,c
  1364   00117A  D7FE               	bra	u377
  1365   00117C  0000               	nop	
  1366   00117E                     
  1367                           ;lcd.c: 143:     WriteNibble(1, 0x03);
  1368   00117E  0E03               	movlw	3
  1369   001180  6E01               	movwf	WriteNibble@data^0,c
  1370   001182  0E01               	movlw	1
  1371   001184  ECAC  F009         	call	_WriteNibble
  1372                           
  1373                           ;lcd.c: 144:     _delay(100);
  1374   001188  0E21               	movlw	33
  1375   00118A                     u387:
  1376   00118A  2EE8               	decfsz	wreg,f,c
  1377   00118C  D7FE               	bra	u387
  1378   00118E  0000               	nop	
  1379   001190                     
  1380                           ;lcd.c: 145:     WriteNibble(1, 0b00000010);
  1381   001190  0E02               	movlw	2
  1382   001192  6E01               	movwf	WriteNibble@data^0,c
  1383   001194  0E01               	movlw	1
  1384   001196  ECAC  F009         	call	_WriteNibble
  1385   00119A                     
  1386                           ;lcd.c: 146:     WaitLCD();
  1387   00119A  EC7A  F00A         	call	_WaitLCD	;wreg free
  1388   00119E                     
  1389                           ;lcd.c: 147:     WriteNibble(1, 0b00000010);
  1390   00119E  0E02               	movlw	2
  1391   0011A0  6E01               	movwf	WriteNibble@data^0,c
  1392   0011A2  0E01               	movlw	1
  1393   0011A4  ECAC  F009         	call	_WriteNibble
  1394   0011A8                     
  1395                           ;lcd.c: 148:     WriteNibble(1, 0b00001000);
  1396   0011A8  0E08               	movlw	8
  1397   0011AA  6E01               	movwf	WriteNibble@data^0,c
  1398   0011AC  0E01               	movlw	1
  1399   0011AE  ECAC  F009         	call	_WriteNibble
  1400   0011B2                     
  1401                           ;lcd.c: 149:     WaitLCD();
  1402   0011B2  EC7A  F00A         	call	_WaitLCD	;wreg free
  1403   0011B6                     
  1404                           ;lcd.c: 150:     WriteNibble(1, 0b00000000);
  1405   0011B6  0E00               	movlw	0
  1406   0011B8  6E01               	movwf	WriteNibble@data^0,c
  1407   0011BA  0E01               	movlw	1
  1408   0011BC  ECAC  F009         	call	_WriteNibble
  1409   0011C0                     
  1410                           ;lcd.c: 151:     WriteNibble(1, 0b00001000);
  1411   0011C0  0E08               	movlw	8
  1412   0011C2  6E01               	movwf	WriteNibble@data^0,c
  1413   0011C4  0E01               	movlw	1
  1414   0011C6  ECAC  F009         	call	_WriteNibble
  1415   0011CA                     
  1416                           ;lcd.c: 152:     WaitLCD();
  1417   0011CA  EC7A  F00A         	call	_WaitLCD	;wreg free
  1418   0011CE                     
  1419                           ;lcd.c: 153:     WriteNibble(1, 0b00000000);
  1420   0011CE  0E00               	movlw	0
  1421   0011D0  6E01               	movwf	WriteNibble@data^0,c
  1422   0011D2  0E01               	movlw	1
  1423   0011D4  ECAC  F009         	call	_WriteNibble
  1424   0011D8                     
  1425                           ;lcd.c: 154:     WriteNibble(1, 0b00001100);
  1426   0011D8  0E0C               	movlw	12
  1427   0011DA  6E01               	movwf	WriteNibble@data^0,c
  1428   0011DC  0E01               	movlw	1
  1429   0011DE  ECAC  F009         	call	_WriteNibble
  1430   0011E2                     
  1431                           ;lcd.c: 156:     WaitLCD();
  1432   0011E2  EC7A  F00A         	call	_WaitLCD	;wreg free
  1433   0011E6                     
  1434                           ;lcd.c: 157:     WriteNibble(1, 0b00000000);
  1435   0011E6  0E00               	movlw	0
  1436   0011E8  6E01               	movwf	WriteNibble@data^0,c
  1437   0011EA  0E01               	movlw	1
  1438   0011EC  ECAC  F009         	call	_WriteNibble
  1439   0011F0                     
  1440                           ;lcd.c: 158:     WriteNibble(1, 0b00000001);
  1441   0011F0  0E01               	movlw	1
  1442   0011F2  6E01               	movwf	WriteNibble@data^0,c
  1443   0011F4  0E01               	movlw	1
  1444   0011F6  ECAC  F009         	call	_WriteNibble
  1445   0011FA                     
  1446                           ;lcd.c: 159:     WaitLCD();
  1447   0011FA  EC7A  F00A         	call	_WaitLCD	;wreg free
  1448   0011FE                     
  1449                           ;lcd.c: 160:     WriteNibble(1, 0b00000000);
  1450   0011FE  0E00               	movlw	0
  1451   001200  6E01               	movwf	WriteNibble@data^0,c
  1452   001202  0E01               	movlw	1
  1453   001204  ECAC  F009         	call	_WriteNibble
  1454   001208                     
  1455                           ;lcd.c: 161:     WriteNibble(1, 0b00000110);
  1456   001208  0E06               	movlw	6
  1457   00120A  6E01               	movwf	WriteNibble@data^0,c
  1458   00120C  0E01               	movlw	1
  1459   00120E  ECAC  F009         	call	_WriteNibble
  1460   001212                     
  1461                           ;lcd.c: 162:     WaitLCD();
  1462   001212  EC7A  F00A         	call	_WaitLCD	;wreg free
  1463   001216  0012               	return		;funcret
  1464   001218                     __end_of_LCDInit:
  1465                           	callstack 0
  1466                           
  1467 ;; *************** function _LCDClear *****************
  1468 ;; Defined at:
  1469 ;;		line 165 in file "lcd.c"
  1470 ;; Parameters:    Size  Location     Type
  1471 ;;		None
  1472 ;; Auto vars:     Size  Location     Type
  1473 ;;		None
  1474 ;; Return value:  Size  Location     Type
  1475 ;;                  1    wreg      void 
  1476 ;; Registers used:
  1477 ;;		wreg, status,2, status,0, cstack
  1478 ;; Tracked objects:
  1479 ;;		On entry : 0/0
  1480 ;;		On exit  : 0/0
  1481 ;;		Unchanged: 0/0
  1482 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1483 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1484 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1485 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1486 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1487 ;;Total ram usage:        1 bytes
  1488 ;; Hardware stack levels used: 1
  1489 ;; Hardware stack levels required when called: 2
  1490 ;; This function calls:
  1491 ;;		_WaitLCD
  1492 ;;		_WriteByte
  1493 ;; This function is called by:
  1494 ;;		_main
  1495 ;; This function uses a non-reentrant model
  1496 ;;
  1497                           
  1498                           	psect	text12
  1499   0014D4                     __ptext12:
  1500                           	callstack 0
  1501   0014D4                     _LCDClear:
  1502                           	callstack 28
  1503   0014D4                     
  1504                           ;lcd.c: 167:      WriteByte(1, 0x01);
  1505   0014D4  0E01               	movlw	1
  1506   0014D6  6E04               	movwf	WriteByte@data^0,c
  1507   0014D8  0E01               	movlw	1
  1508   0014DA  EC96  F00A         	call	_WriteByte
  1509   0014DE                     
  1510                           ;lcd.c: 168:      _delay(12500);
  1511   0014DE  0E11               	movlw	17
  1512   0014E0  6E06               	movwf	??_LCDClear^0,c
  1513   0014E2  0E3A               	movlw	58
  1514   0014E4                     u397:
  1515   0014E4  2EE8               	decfsz	wreg,f,c
  1516   0014E6  D7FE               	bra	u397
  1517   0014E8  2E06               	decfsz	??_LCDClear^0,f,c
  1518   0014EA  D7FC               	bra	u397
  1519   0014EC  D000               	nop2	
  1520   0014EE                     
  1521                           ;lcd.c: 169:      WaitLCD();
  1522   0014EE  EC7A  F00A         	call	_WaitLCD	;wreg free
  1523   0014F2  0012               	return		;funcret
  1524   0014F4                     __end_of_LCDClear:
  1525                           	callstack 0
  1526                           
  1527 ;; *************** function _WriteByte *****************
  1528 ;; Defined at:
  1529 ;;		line 84 in file "lcd.c"
  1530 ;; Parameters:    Size  Location     Type
  1531 ;;  cmd             1    wreg     unsigned char 
  1532 ;;  data            1    3[COMRAM] unsigned char 
  1533 ;; Auto vars:     Size  Location     Type
  1534 ;;  cmd             1    4[COMRAM] unsigned char 
  1535 ;; Return value:  Size  Location     Type
  1536 ;;                  1    wreg      void 
  1537 ;; Registers used:
  1538 ;;		wreg, status,2, status,0, cstack
  1539 ;; Tracked objects:
  1540 ;;		On entry : 0/0
  1541 ;;		On exit  : 0/0
  1542 ;;		Unchanged: 0/0
  1543 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1544 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1545 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1546 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1547 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1548 ;;Total ram usage:        2 bytes
  1549 ;; Hardware stack levels used: 1
  1550 ;; Hardware stack levels required when called: 1
  1551 ;; This function calls:
  1552 ;;		_WriteNibble
  1553 ;; This function is called by:
  1554 ;;		_LCDClear
  1555 ;;		_LCDGoto
  1556 ;;		_LCDPutChar
  1557 ;;		_LCDShiftDisplay
  1558 ;; This function uses a non-reentrant model
  1559 ;;
  1560                           
  1561                           	psect	text13
  1562   00152C                     __ptext13:
  1563                           	callstack 0
  1564   00152C                     _WriteByte:
  1565                           	callstack 27
  1566                           
  1567                           ;incstack = 0
  1568                           ;WriteByte@cmd stored from wreg
  1569   00152C  6E05               	movwf	WriteByte@cmd^0,c
  1570   00152E                     
  1571                           ;lcd.c: 84: void WriteByte(UINT8_T cmd, UINT8_T data);lcd.c: 85: {;lcd.c: 86:     WriteN
      +                          ibble(cmd, data >> 4);
  1572   00152E  3804               	swapf	WriteByte@data^0,w,c
  1573   001530  0B0F               	andlw	15
  1574   001532  6E01               	movwf	WriteNibble@data^0,c
  1575   001534  5005               	movf	WriteByte@cmd^0,w,c
  1576   001536  ECAC  F009         	call	_WriteNibble
  1577                           
  1578                           ;lcd.c: 87:     WriteNibble(cmd, data);
  1579   00153A  C004  F001         	movff	WriteByte@data,WriteNibble@data
  1580   00153E  5005               	movf	WriteByte@cmd^0,w,c
  1581   001540  ECAC  F009         	call	_WriteNibble
  1582   001544  0012               	return		;funcret
  1583   001546                     __end_of_WriteByte:
  1584                           	callstack 0
  1585                           
  1586 ;; *************** function _WriteNibble *****************
  1587 ;; Defined at:
  1588 ;;		line 67 in file "lcd.c"
  1589 ;; Parameters:    Size  Location     Type
  1590 ;;  cmd             1    wreg     unsigned char 
  1591 ;;  data            1    0[COMRAM] unsigned char 
  1592 ;; Auto vars:     Size  Location     Type
  1593 ;;  cmd             1    2[COMRAM] unsigned char 
  1594 ;; Return value:  Size  Location     Type
  1595 ;;                  1    wreg      void 
  1596 ;; Registers used:
  1597 ;;		wreg, status,2, status,0
  1598 ;; Tracked objects:
  1599 ;;		On entry : 0/0
  1600 ;;		On exit  : 0/0
  1601 ;;		Unchanged: 0/0
  1602 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1603 ;;      Params:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1604 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1605 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1606 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1607 ;;Total ram usage:        3 bytes
  1608 ;; Hardware stack levels used: 1
  1609 ;; This function calls:
  1610 ;;		Nothing
  1611 ;; This function is called by:
  1612 ;;		_WriteByte
  1613 ;;		_LCDInit
  1614 ;; This function uses a non-reentrant model
  1615 ;;
  1616                           
  1617                           	psect	text14
  1618   001358                     __ptext14:
  1619                           	callstack 0
  1620   001358                     _WriteNibble:
  1621                           	callstack 27
  1622                           
  1623                           ;incstack = 0
  1624                           ;WriteNibble@cmd stored from wreg
  1625   001358  6E03               	movwf	WriteNibble@cmd^0,c
  1626   00135A                     
  1627                           ;lcd.c: 67: void WriteNibble(UINT8_T cmd, UINT8_T data);lcd.c: 68: {;lcd.c: 69:     LATD
      +                          bits.LATD4 = (cmd ? 0 : 1);
  1628   00135A  5003               	movf	WriteNibble@cmd^0,w,c
  1629   00135C  B4D8               	btfsc	status,2,c
  1630   00135E  EFB3  F009         	goto	u211
  1631   001362  EFB7  F009         	goto	u210
  1632   001366                     u211:
  1633   001366  6A02               	clrf	??_WriteNibble^0,c
  1634   001368  2A02               	incf	??_WriteNibble^0,f,c
  1635   00136A  EFB8  F009         	goto	u228
  1636   00136E                     u210:
  1637   00136E  6A02               	clrf	??_WriteNibble^0,c
  1638   001370                     u228:
  1639   001370  3A02               	swapf	??_WriteNibble^0,f,c
  1640   001372  508C               	movf	140,w,c	;volatile
  1641   001374  1802               	xorwf	??_WriteNibble^0,w,c
  1642   001376  0BEF               	andlw	-17
  1643   001378  1802               	xorwf	??_WriteNibble^0,w,c
  1644   00137A  6E8C               	movwf	140,c	;volatile
  1645   00137C                     
  1646                           ;lcd.c: 70:     LATDbits.LATD5 = 0;
  1647   00137C  9A8C               	bcf	140,5,c	;volatile
  1648   00137E                     
  1649                           ;lcd.c: 71:     LATDbits.LATD6 = 1;
  1650   00137E  8C8C               	bsf	140,6,c	;volatile
  1651   001380                     
  1652                           ;lcd.c: 73:     LATDbits.LATD0 = LATDbits.LATD1 = LATDbits.LATD2 = LATDbits.LATD3 = 0;
  1653   001380  968C               	bcf	140,3,c	;volatile
  1654   001382  948C               	bcf	140,2,c	;volatile
  1655   001384  928C               	bcf	140,1,c	;volatile
  1656   001386  908C               	bcf	140,0,c	;volatile
  1657   001388                     
  1658                           ;lcd.c: 74:     __nop();
  1659   001388  0000               	nop	
  1660   00138A                     
  1661                           ;lcd.c: 75:     __nop();
  1662   00138A  0000               	nop	
  1663                           
  1664                           ;lcd.c: 77:     LATD = (LATD & 0xF0) | (data & 0x0F);
  1665   00138C  C001  F002         	movff	WriteNibble@data,??_WriteNibble
  1666   001390  0E0F               	movlw	15
  1667   001392  1602               	andwf	??_WriteNibble^0,f,c
  1668   001394  508C               	movf	140,w,c	;volatile
  1669   001396  0BF0               	andlw	240
  1670   001398  1002               	iorwf	??_WriteNibble^0,w,c
  1671   00139A  6E8C               	movwf	140,c	;volatile
  1672   00139C                     
  1673                           ;lcd.c: 78:     __nop();
  1674   00139C  0000               	nop	
  1675   00139E                     
  1676                           ;lcd.c: 79:     __nop();
  1677   00139E  0000               	nop	
  1678   0013A0                     
  1679                           ;lcd.c: 81:     LATDbits.LATD6 = 0;
  1680   0013A0  9C8C               	bcf	140,6,c	;volatile
  1681   0013A2  0012               	return		;funcret
  1682   0013A4                     __end_of_WriteNibble:
  1683                           	callstack 0
  1684                           
  1685 ;; *************** function _WaitLCD *****************
  1686 ;; Defined at:
  1687 ;;		line 53 in file "lcd.c"
  1688 ;; Parameters:    Size  Location     Type
  1689 ;;		None
  1690 ;; Auto vars:     Size  Location     Type
  1691 ;;  status          1    1[COMRAM] unsigned char 
  1692 ;; Return value:  Size  Location     Type
  1693 ;;                  1    wreg      void 
  1694 ;; Registers used:
  1695 ;;		wreg, status,2, status,0, cstack
  1696 ;; Tracked objects:
  1697 ;;		On entry : 0/0
  1698 ;;		On exit  : 0/0
  1699 ;;		Unchanged: 0/0
  1700 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1701 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1702 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1703 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1704 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1705 ;;Total ram usage:        1 bytes
  1706 ;; Hardware stack levels used: 1
  1707 ;; Hardware stack levels required when called: 1
  1708 ;; This function calls:
  1709 ;;		_ReadByte
  1710 ;; This function is called by:
  1711 ;;		_LCDInit
  1712 ;;		_LCDClear
  1713 ;;		_LCDGoto
  1714 ;;		_LCDPutChar
  1715 ;; This function uses a non-reentrant model
  1716 ;;
  1717                           
  1718                           	psect	text15
  1719   0014F4                     __ptext15:
  1720                           	callstack 0
  1721   0014F4                     _WaitLCD:
  1722                           	callstack 27
  1723   0014F4                     
  1724                           ;lcd.c: 55:     UINT8_T status;;lcd.c: 57:     LATDbits.LATD4 = 0;
  1725   0014F4  988C               	bcf	140,4,c	;volatile
  1726                           
  1727                           ;lcd.c: 58:     LATDbits.LATD5 = 1;
  1728   0014F6  8A8C               	bsf	140,5,c	;volatile
  1729   0014F8                     l1227:
  1730                           
  1731                           ;lcd.c: 61:         status = ReadByte();
  1732   0014F8  EC09  F00A         	call	_ReadByte	;wreg free
  1733   0014FC  6E02               	movwf	WaitLCD@status^0,c
  1734   0014FE                     
  1735                           ;lcd.c: 62:     } while (status & 0x80);
  1736   0014FE  BE02               	btfsc	WaitLCD@status^0,7,c
  1737   001500  EF84  F00A         	goto	u231
  1738   001504  EF86  F00A         	goto	u230
  1739   001508                     u231:
  1740   001508  EF7C  F00A         	goto	l1227
  1741   00150C                     u230:
  1742   00150C                     
  1743                           ;lcd.c: 64:     LATDbits.LATD5 = 0;
  1744   00150C  9A8C               	bcf	140,5,c	;volatile
  1745   00150E  0012               	return		;funcret
  1746   001510                     __end_of_WaitLCD:
  1747                           	callstack 0
  1748                           
  1749 ;; *************** function _ReadByte *****************
  1750 ;; Defined at:
  1751 ;;		line 22 in file "lcd.c"
  1752 ;; Parameters:    Size  Location     Type
  1753 ;;		None
  1754 ;; Auto vars:     Size  Location     Type
  1755 ;;  status          1    0[COMRAM] unsigned char 
  1756 ;; Return value:  Size  Location     Type
  1757 ;;                  1    wreg      unsigned char 
  1758 ;; Registers used:
  1759 ;;		wreg, status,2, status,0
  1760 ;; Tracked objects:
  1761 ;;		On entry : 0/0
  1762 ;;		On exit  : 0/0
  1763 ;;		Unchanged: 0/0
  1764 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1765 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1766 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1767 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1768 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1769 ;;Total ram usage:        1 bytes
  1770 ;; Hardware stack levels used: 1
  1771 ;; This function calls:
  1772 ;;		Nothing
  1773 ;; This function is called by:
  1774 ;;		_WaitLCD
  1775 ;; This function uses a non-reentrant model
  1776 ;;
  1777                           
  1778                           	psect	text16
  1779   001412                     __ptext16:
  1780                           	callstack 0
  1781   001412                     _ReadByte:
  1782                           	callstack 27
  1783   001412                     
  1784                           ;lcd.c: 24:     UINT8_T status;;lcd.c: 26:     TRISDbits.TRISD0 = 1;
  1785   001412  8095               	bsf	149,0,c	;volatile
  1786                           
  1787                           ;lcd.c: 27:     TRISDbits.TRISD1 = 1;
  1788   001414  8295               	bsf	149,1,c	;volatile
  1789                           
  1790                           ;lcd.c: 28:     TRISDbits.TRISD2 = 1;
  1791   001416  8495               	bsf	149,2,c	;volatile
  1792                           
  1793                           ;lcd.c: 29:     TRISDbits.TRISD3 = 1;
  1794   001418  8695               	bsf	149,3,c	;volatile
  1795                           
  1796                           ;lcd.c: 31:     LATDbits.LATD6 = 1;
  1797   00141A  8C8C               	bsf	140,6,c	;volatile
  1798                           
  1799                           ;lcd.c: 32:     __nop();
  1800   00141C  0000               	nop	
  1801                           
  1802                           ;lcd.c: 33:     __nop();
  1803   00141E  0000               	nop	
  1804   001420                     
  1805                           ;lcd.c: 35:     status = PORTD << 4;
  1806   001420  3883               	swapf	131,w,c	;volatile
  1807   001422  0BF0               	andlw	240
  1808   001424  6E01               	movwf	ReadByte@status^0,c
  1809   001426                     
  1810                           ;lcd.c: 36:     LATDbits.LATD6 = 0;
  1811   001426  9C8C               	bcf	140,6,c	;volatile
  1812   001428                     
  1813                           ;lcd.c: 38:     LATDbits.LATD6 = 1;
  1814   001428  8C8C               	bsf	140,6,c	;volatile
  1815   00142A                     
  1816                           ;lcd.c: 39:     __nop();
  1817   00142A  0000               	nop	
  1818   00142C                     
  1819                           ;lcd.c: 40:     __nop();
  1820   00142C  0000               	nop	
  1821                           
  1822                           ;lcd.c: 42:     status |= PORTD & 0x0F;
  1823   00142E  5083               	movf	131,w,c	;volatile
  1824   001430  0B0F               	andlw	15
  1825   001432  1201               	iorwf	ReadByte@status^0,f,c
  1826   001434                     
  1827                           ;lcd.c: 43:     LATDbits.LATD6 = 0;
  1828   001434  9C8C               	bcf	140,6,c	;volatile
  1829   001436                     
  1830                           ;lcd.c: 45:     TRISDbits.TRISD0 = 0;
  1831   001436  9095               	bcf	149,0,c	;volatile
  1832   001438                     
  1833                           ;lcd.c: 46:     TRISDbits.TRISD1 = 0;
  1834   001438  9295               	bcf	149,1,c	;volatile
  1835   00143A                     
  1836                           ;lcd.c: 47:     TRISDbits.TRISD2 = 0;
  1837   00143A  9495               	bcf	149,2,c	;volatile
  1838   00143C                     
  1839                           ;lcd.c: 48:     TRISDbits.TRISD3 = 0;
  1840   00143C  9695               	bcf	149,3,c	;volatile
  1841   00143E                     
  1842                           ;lcd.c: 50:     return(status);
  1843   00143E  5001               	movf	ReadByte@status^0,w,c
  1844   001440  0012               	return		;funcret
  1845   001442                     __end_of_ReadByte:
  1846                           	callstack 0
  1847                           
  1848 ;; *************** function _I2C_Write_Register *****************
  1849 ;; Defined at:
  1850 ;;		line 82 in file "mesure_temp.c"
  1851 ;; Parameters:    Size  Location     Type
  1852 ;;  reg             1    wreg     unsigned char 
  1853 ;;  value           2    2[COMRAM] unsigned int 
  1854 ;; Auto vars:     Size  Location     Type
  1855 ;;  reg             1    4[COMRAM] unsigned char 
  1856 ;; Return value:  Size  Location     Type
  1857 ;;                  1    wreg      void 
  1858 ;; Registers used:
  1859 ;;		wreg, status,2, status,0, cstack
  1860 ;; Tracked objects:
  1861 ;;		On entry : 0/0
  1862 ;;		On exit  : 0/0
  1863 ;;		Unchanged: 0/0
  1864 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1865 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1866 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;Total ram usage:        3 bytes
  1870 ;; Hardware stack levels used: 1
  1871 ;; Hardware stack levels required when called: 2
  1872 ;; This function calls:
  1873 ;;		_i2c_start
  1874 ;;		_i2c_stop
  1875 ;;		_i2c_write
  1876 ;; This function is called by:
  1877 ;;		_main
  1878 ;; This function uses a non-reentrant model
  1879 ;;
  1880                           
  1881                           	psect	text17
  1882   00146E                     __ptext17:
  1883                           	callstack 0
  1884   00146E                     _I2C_Write_Register:
  1885                           	callstack 28
  1886                           
  1887                           ;incstack = 0
  1888                           ;I2C_Write_Register@reg stored from wreg
  1889   00146E  6E05               	movwf	I2C_Write_Register@reg^0,c
  1890   001470  ECD1  F00A         	call	_i2c_start	;wreg free
  1891   001474  0E80               	movlw	128
  1892   001476  EC88  F00A         	call	_i2c_write
  1893   00147A  5005               	movf	I2C_Write_Register@reg^0,w,c
  1894   00147C  EC88  F00A         	call	_i2c_write
  1895   001480  5004               	movf	(I2C_Write_Register@value+1)^0,w,c
  1896   001482  EC88  F00A         	call	_i2c_write
  1897   001486  5003               	movf	I2C_Write_Register@value^0,w,c
  1898   001488  EC88  F00A         	call	_i2c_write
  1899   00148C  ECAF  F00A         	call	_i2c_stop	;wreg free
  1900   001490  0012               	return		;funcret
  1901   001492                     __end_of_I2C_Write_Register:
  1902                           	callstack 0
  1903                           
  1904 ;; *************** function _i2c_write *****************
  1905 ;; Defined at:
  1906 ;;		line 106 in file "i2c.c"
  1907 ;; Parameters:    Size  Location     Type
  1908 ;;  i2cWriteData    1    wreg     unsigned char 
  1909 ;; Auto vars:     Size  Location     Type
  1910 ;;  i2cWriteData    1    1[COMRAM] unsigned char 
  1911 ;; Return value:  Size  Location     Type
  1912 ;;                  1    wreg      void 
  1913 ;; Registers used:
  1914 ;;		wreg, status,2, status,0, cstack
  1915 ;; Tracked objects:
  1916 ;;		On entry : 0/0
  1917 ;;		On exit  : 0/0
  1918 ;;		Unchanged: 0/0
  1919 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1920 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1921 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1922 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1923 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1924 ;;Total ram usage:        1 bytes
  1925 ;; Hardware stack levels used: 1
  1926 ;; Hardware stack levels required when called: 1
  1927 ;; This function calls:
  1928 ;;		_i2c_waitForIdle
  1929 ;; This function is called by:
  1930 ;;		_I2C_Write_Register
  1931 ;;		_main
  1932 ;; This function uses a non-reentrant model
  1933 ;;
  1934                           
  1935                           	psect	text18
  1936   001510                     __ptext18:
  1937                           	callstack 0
  1938   001510                     _i2c_write:
  1939                           	callstack 29
  1940                           
  1941                           ;incstack = 0
  1942                           ;i2c_write@i2cWriteData stored from wreg
  1943   001510  6E02               	movwf	i2c_write@i2cWriteData^0,c
  1944   001512                     
  1945                           ;i2c.c: 108:     i2c_waitForIdle();
  1946   001512  EC21  F00A         	call	_i2c_waitForIdle	;wreg free
  1947   001516                     
  1948                           ;i2c.c: 110:     PIR1bits.SSP1IF = 0;
  1949   001516  969E               	bcf	158,3,c	;volatile
  1950   001518                     
  1951                           ;i2c.c: 111:     SSP1BUF = i2cWriteData;
  1952   001518  C002  FFC9         	movff	i2c_write@i2cWriteData,4041	;volatile
  1953   00151C                     l74:
  1954   00151C  A69E               	btfss	158,3,c	;volatile
  1955   00151E  EF93  F00A         	goto	u81
  1956   001522  EF95  F00A         	goto	u80
  1957   001526                     u81:
  1958   001526  EF8E  F00A         	goto	l74
  1959   00152A                     u80:
  1960   00152A  0012               	return		;funcret
  1961   00152C                     __end_of_i2c_write:
  1962                           	callstack 0
  1963                           
  1964 ;; *************** function _i2c_stop *****************
  1965 ;; Defined at:
  1966 ;;		line 68 in file "i2c.c"
  1967 ;; Parameters:    Size  Location     Type
  1968 ;;		None
  1969 ;; Auto vars:     Size  Location     Type
  1970 ;;		None
  1971 ;; Return value:  Size  Location     Type
  1972 ;;                  1    wreg      void 
  1973 ;; Registers used:
  1974 ;;		wreg, status,2, status,0, cstack
  1975 ;; Tracked objects:
  1976 ;;		On entry : 0/0
  1977 ;;		On exit  : 0/0
  1978 ;;		Unchanged: 0/0
  1979 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1980 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1981 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1982 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1983 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1984 ;;Total ram usage:        0 bytes
  1985 ;; Hardware stack levels used: 1
  1986 ;; Hardware stack levels required when called: 1
  1987 ;; This function calls:
  1988 ;;		_i2c_waitForIdle
  1989 ;; This function is called by:
  1990 ;;		_I2C_Write_Register
  1991 ;;		_main
  1992 ;; This function uses a non-reentrant model
  1993 ;;
  1994                           
  1995                           	psect	text19
  1996   00155E                     __ptext19:
  1997                           	callstack 0
  1998   00155E                     _i2c_stop:
  1999                           	callstack 29
  2000   00155E                     
  2001                           ;i2c.c: 70:     i2c_waitForIdle();
  2002   00155E  EC21  F00A         	call	_i2c_waitForIdle	;wreg free
  2003   001562                     
  2004                           ;i2c.c: 72:     PIR1bits.SSP1IF = 0;
  2005   001562  969E               	bcf	158,3,c	;volatile
  2006   001564                     
  2007                           ;i2c.c: 73:     SSP1CON2bits.PEN = 1;
  2008   001564  84C5               	bsf	197,2,c	;volatile
  2009   001566                     l50:
  2010   001566  A69E               	btfss	158,3,c	;volatile
  2011   001568  EFB8  F00A         	goto	u71
  2012   00156C  EFBA  F00A         	goto	u70
  2013   001570                     u71:
  2014   001570  EFB3  F00A         	goto	l50
  2015   001574                     u70:
  2016   001574  0012               	return		;funcret
  2017   001576                     __end_of_i2c_stop:
  2018                           	callstack 0
  2019                           
  2020 ;; *************** function _i2c_waitForIdle *****************
  2021 ;; Defined at:
  2022 ;;		line 46 in file "i2c.c"
  2023 ;; Parameters:    Size  Location     Type
  2024 ;;		None
  2025 ;; Auto vars:     Size  Location     Type
  2026 ;;		None
  2027 ;; Return value:  Size  Location     Type
  2028 ;;                  1    wreg      void 
  2029 ;; Registers used:
  2030 ;;		wreg, status,2, status,0
  2031 ;; Tracked objects:
  2032 ;;		On entry : 0/0
  2033 ;;		On exit  : 0/0
  2034 ;;		Unchanged: 0/0
  2035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2036 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2037 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2038 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2039 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2040 ;;Total ram usage:        1 bytes
  2041 ;; Hardware stack levels used: 1
  2042 ;; This function calls:
  2043 ;;		Nothing
  2044 ;; This function is called by:
  2045 ;;		_i2c_repStart
  2046 ;;		_i2c_stop
  2047 ;;		_i2c_read
  2048 ;;		_i2c_write
  2049 ;; This function uses a non-reentrant model
  2050 ;;
  2051                           
  2052                           	psect	text20
  2053   001442                     __ptext20:
  2054                           	callstack 0
  2055   001442                     _i2c_waitForIdle:
  2056                           	callstack 29
  2057   001442                     l925:
  2058   001442  B4C7               	btfsc	199,2,c	;volatile
  2059   001444  EF26  F00A         	goto	u41
  2060   001448  EF2A  F00A         	goto	u40
  2061   00144C                     u41:
  2062   00144C  6A01               	clrf	??_i2c_waitForIdle^0,c
  2063   00144E  2A01               	incf	??_i2c_waitForIdle^0,f,c
  2064   001450  EF2B  F00A         	goto	u48
  2065   001454                     u40:
  2066   001454  6A01               	clrf	??_i2c_waitForIdle^0,c
  2067   001456                     u48:
  2068   001456  50C5               	movf	197,w,c	;volatile
  2069   001458  0B1F               	andlw	31
  2070   00145A  1001               	iorwf	??_i2c_waitForIdle^0,w,c
  2071   00145C  0900               	iorlw	0
  2072   00145E  A4D8               	btfss	status,2,c
  2073   001460  EF34  F00A         	goto	u51
  2074   001464  EF36  F00A         	goto	u50
  2075   001468                     u51:
  2076   001468  EF21  F00A         	goto	l925
  2077   00146C                     u50:
  2078   00146C  0012               	return		;funcret
  2079   00146E                     __end_of_i2c_waitForIdle:
  2080                           	callstack 0
  2081                           
  2082 ;; *************** function _i2c_start *****************
  2083 ;; Defined at:
  2084 ;;		line 52 in file "i2c.c"
  2085 ;; Parameters:    Size  Location     Type
  2086 ;;		None
  2087 ;; Auto vars:     Size  Location     Type
  2088 ;;		None
  2089 ;; Return value:  Size  Location     Type
  2090 ;;                  1    wreg      void 
  2091 ;; Registers used:
  2092 ;;		None
  2093 ;; Tracked objects:
  2094 ;;		On entry : 0/0
  2095 ;;		On exit  : 0/0
  2096 ;;		Unchanged: 0/0
  2097 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2098 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2099 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2100 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2101 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2102 ;;Total ram usage:        0 bytes
  2103 ;; Hardware stack levels used: 1
  2104 ;; This function calls:
  2105 ;;		Nothing
  2106 ;; This function is called by:
  2107 ;;		_I2C_Write_Register
  2108 ;;		_main
  2109 ;; This function uses a non-reentrant model
  2110 ;;
  2111                           
  2112                           	psect	text21
  2113   0015A2                     __ptext21:
  2114                           	callstack 0
  2115   0015A2                     _i2c_start:
  2116                           	callstack 30
  2117   0015A2                     
  2118                           ;i2c.c: 54:     PIR1bits.SSP1IF = 0;
  2119   0015A2  969E               	bcf	158,3,c	;volatile
  2120                           
  2121                           ;i2c.c: 55:     SSP1CON2bits.SEN = 1;
  2122   0015A4  80C5               	bsf	197,0,c	;volatile
  2123   0015A6                     l38:
  2124   0015A6  A69E               	btfss	158,3,c	;volatile
  2125   0015A8  EFD8  F00A         	goto	u61
  2126   0015AC  EFDA  F00A         	goto	u60
  2127   0015B0                     u61:
  2128   0015B0  EFD3  F00A         	goto	l38
  2129   0015B4                     u60:
  2130   0015B4  0012               	return		;funcret
  2131   0015B6                     __end_of_i2c_start:
  2132                           	callstack 0
  2133                           
  2134                           	psect	rparam
  2135   000000                     
  2136                           	psect	config
  2137                           
  2138                           ; Padding undefined space
  2139   300000                     	org	3145728
  2140   300000  FF                 	db	255
  2141                           
  2142                           ;Config register CONFIG1H @ 0x300001
  2143                           ;	Oscillator Selection bits
  2144                           ;	FOSC = INTIO67, Internal oscillator block
  2145                           ;	4X PLL Enable
  2146                           ;	PLLCFG = OFF, Oscillator used directly
  2147                           ;	Primary clock enable bit
  2148                           ;	PRICLKEN = ON, Primary clock is always enabled
  2149                           ;	Fail-Safe Clock Monitor Enable bit
  2150                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
  2151                           ;	Internal/External Oscillator Switchover bit
  2152                           ;	IESO = OFF, Oscillator Switchover mode disabled
  2153   300001                     	org	3145729
  2154   300001  28                 	db	40
  2155                           
  2156                           ;Config register CONFIG2L @ 0x300002
  2157                           ;	Power-up Timer Enable bit
  2158                           ;	PWRTEN = OFF, Power up timer disabled
  2159                           ;	Brown-out Reset Enable bits
  2160                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
  2161                           ;	Brown Out Reset Voltage bits
  2162                           ;	BORV = 190, VBOR set to 1.90 V nominal
  2163   300002                     	org	3145730
  2164   300002  1F                 	db	31
  2165                           
  2166                           ;Config register CONFIG2H @ 0x300003
  2167                           ;	Watchdog Timer Enable bits
  2168                           ;	WDTEN = OFF, Watch dog timer is always disabled. SWDTEN has no effect.
  2169                           ;	Watchdog Timer Postscale Select bits
  2170                           ;	WDTPS = 32768, 1:32768
  2171   300003                     	org	3145731
  2172   300003  3C                 	db	60
  2173                           
  2174                           ; Padding undefined space
  2175   300004                     	org	3145732
  2176   300004  FF                 	db	255
  2177                           
  2178                           ;Config register CONFIG3H @ 0x300005
  2179                           ;	CCP2 MUX bit
  2180                           ;	CCP2MX = PORTC1, CCP2 input/output is multiplexed with RC1
  2181                           ;	PORTB A/D Enable bit
  2182                           ;	PBADEN = OFF, PORTB<5:0> pins are configured as digital I/O on Reset
  2183                           ;	P3A/CCP3 Mux bit
  2184                           ;	CCP3MX = PORTB5, P3A/CCP3 input/output is multiplexed with RB5
  2185                           ;	HFINTOSC Fast Start-up
  2186                           ;	HFOFST = ON, HFINTOSC output and ready status are not delayed by the oscillator stable
      +                           status
  2187                           ;	Timer3 Clock input mux bit
  2188                           ;	T3CMX = PORTC0, T3CKI is on RC0
  2189                           ;	ECCP2 B output mux bit
  2190                           ;	P2BMX = PORTD2, P2B is on RD2
  2191                           ;	MCLR Pin Enable bit
  2192                           ;	MCLRE = EXTMCLR, MCLR pin enabled, RE3 input pin disabled
  2193   300005                     	org	3145733
  2194   300005  BD                 	db	189
  2195                           
  2196                           ;Config register CONFIG4L @ 0x300006
  2197                           ;	Stack Full/Underflow Reset Enable bit
  2198                           ;	STVREN = ON, Stack full/underflow will cause Reset
  2199                           ;	Single-Supply ICSP Enable bit
  2200                           ;	LVP = OFF, Single-Supply ICSP disabled
  2201                           ;	Extended Instruction Set Enable bit
  2202                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
  2203                           ;	Background Debug
  2204                           ;	DEBUG = 0x1, unprogrammed default
  2205   300006                     	org	3145734
  2206   300006  81                 	db	129
  2207                           
  2208                           ; Padding undefined space
  2209   300007                     	org	3145735
  2210   300007  FF                 	db	255
  2211                           
  2212                           ;Config register CONFIG5L @ 0x300008
  2213                           ;	Code Protection Block 0
  2214                           ;	CP0 = OFF, Block 0 (000800-003FFFh) not code-protected
  2215                           ;	Code Protection Block 1
  2216                           ;	CP1 = OFF, Block 1 (004000-007FFFh) not code-protected
  2217                           ;	Code Protection Block 2
  2218                           ;	CP2 = OFF, Block 2 (008000-00BFFFh) not code-protected
  2219                           ;	Code Protection Block 3
  2220                           ;	CP3 = OFF, Block 3 (00C000-00FFFFh) not code-protected
  2221   300008                     	org	3145736
  2222   300008  0F                 	db	15
  2223                           
  2224                           ;Config register CONFIG5H @ 0x300009
  2225                           ;	Boot Block Code Protection bit
  2226                           ;	CPB = OFF, Boot block (000000-0007FFh) not code-protected
  2227                           ;	Data EEPROM Code Protection bit
  2228                           ;	CPD = OFF, Data EEPROM not code-protected
  2229   300009                     	org	3145737
  2230   300009  C0                 	db	192
  2231                           
  2232                           ;Config register CONFIG6L @ 0x30000A
  2233                           ;	Write Protection Block 0
  2234                           ;	WRT0 = OFF, Block 0 (000800-003FFFh) not write-protected
  2235                           ;	Write Protection Block 1
  2236                           ;	WRT1 = OFF, Block 1 (004000-007FFFh) not write-protected
  2237                           ;	Write Protection Block 2
  2238                           ;	WRT2 = OFF, Block 2 (008000-00BFFFh) not write-protected
  2239                           ;	Write Protection Block 3
  2240                           ;	WRT3 = OFF, Block 3 (00C000-00FFFFh) not write-protected
  2241   30000A                     	org	3145738
  2242   30000A  0F                 	db	15
  2243                           
  2244                           ;Config register CONFIG6H @ 0x30000B
  2245                           ;	Configuration Register Write Protection bit
  2246                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
  2247                           ;	Boot Block Write Protection bit
  2248                           ;	WRTB = OFF, Boot Block (000000-0007FFh) not write-protected
  2249                           ;	Data EEPROM Write Protection bit
  2250                           ;	WRTD = OFF, Data EEPROM not write-protected
  2251   30000B                     	org	3145739
  2252   30000B  E0                 	db	224
  2253                           
  2254                           ;Config register CONFIG7L @ 0x30000C
  2255                           ;	Table Read Protection Block 0
  2256                           ;	EBTR0 = OFF, Block 0 (000800-003FFFh) not protected from table reads executed in other
      +                           blocks
  2257                           ;	Table Read Protection Block 1
  2258                           ;	EBTR1 = OFF, Block 1 (004000-007FFFh) not protected from table reads executed in other
      +                           blocks
  2259                           ;	Table Read Protection Block 2
  2260                           ;	EBTR2 = OFF, Block 2 (008000-00BFFFh) not protected from table reads executed in other
      +                           blocks
  2261                           ;	Table Read Protection Block 3
  2262                           ;	EBTR3 = OFF, Block 3 (00C000-00FFFFh) not protected from table reads executed in other
      +                           blocks
  2263   30000C                     	org	3145740
  2264   30000C  0F                 	db	15
  2265                           
  2266                           ;Config register CONFIG7H @ 0x30000D
  2267                           ;	Boot Block Table Read Protection bit
  2268                           ;	EBTRB = OFF, Boot Block (000000-0007FFh) not protected from table reads executed in ot
      +                          her blocks
  2269   30000D                     	org	3145741
  2270   30000D  40                 	db	64
  2271                           tosu	equ	0xFFF
  2272                           tosh	equ	0xFFE
  2273                           tosl	equ	0xFFD
  2274                           stkptr	equ	0xFFC
  2275                           pclatu	equ	0xFFB
  2276                           pclath	equ	0xFFA
  2277                           pcl	equ	0xFF9
  2278                           tblptru	equ	0xFF8
  2279                           tblptrh	equ	0xFF7
  2280                           tblptrl	equ	0xFF6
  2281                           tablat	equ	0xFF5
  2282                           prodh	equ	0xFF4
  2283                           prodl	equ	0xFF3
  2284                           indf0	equ	0xFEF
  2285                           postinc0	equ	0xFEE
  2286                           postdec0	equ	0xFED
  2287                           preinc0	equ	0xFEC
  2288                           plusw0	equ	0xFEB
  2289                           fsr0h	equ	0xFEA
  2290                           fsr0l	equ	0xFE9
  2291                           wreg	equ	0xFE8
  2292                           indf1	equ	0xFE7
  2293                           postinc1	equ	0xFE6
  2294                           postdec1	equ	0xFE5
  2295                           preinc1	equ	0xFE4
  2296                           plusw1	equ	0xFE3
  2297                           fsr1h	equ	0xFE2
  2298                           fsr1l	equ	0xFE1
  2299                           bsr	equ	0xFE0
  2300                           indf2	equ	0xFDF
  2301                           postinc2	equ	0xFDE
  2302                           postdec2	equ	0xFDD
  2303                           preinc2	equ	0xFDC
  2304                           plusw2	equ	0xFDB
  2305                           fsr2h	equ	0xFDA
  2306                           fsr2l	equ	0xFD9
  2307                           status	equ	0xFD8

Data Sizes:
    Strings     49
    Constant    0
    Data        2
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95     46      48
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15           56      0       0

Pointer List with Targets:

    LCDWriteHexa@hexa	PTR unsigned char  size(1) Largest target is 17
		 -> STR_1(CODE[17]), 

    LCDWriteStr@string	PTR const unsigned char  size(2) Largest target is 16
		 -> LCDWriteFloat@string(COMRAM[5]), LCDWriteHexa@string(COMRAM[3]), LCDWriteInt@string(COMRAM[3]), main@string(COMRAM[16]), 
		 -> STR_3(CODE[11]), STR_4(CODE[11]), 

    sp__strcpy	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@d	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@dest	PTR unsigned char  size(1) Largest target is 16
		 -> main@string(COMRAM[16]), 

    strcpy@src	PTR const unsigned char  size(1) Largest target is 10
		 -> STR_2(CODE[10]), 


Critical Paths under _main in COMRAM

    _main->_LCDWriteHexa
    _i2c_repStart->_i2c_waitForIdle
    _i2c_read->_i2c_waitForIdle
    _LCDWriteHexa->_LCDGoto
    _LCDWriteHexa->_LCDWriteStr
    _LCDWriteStr->_LCDPutChar
    _LCDPutChar->_WriteByte
    _LCDGoto->_WriteByte
    _LCDInit->_WriteNibble
    _LCDClear->_WriteByte
    _WriteByte->_WriteNibble
    _WaitLCD->_ReadByte
    _I2C_Write_Register->_i2c_write
    _i2c_write->_i2c_waitForIdle
    _i2c_stop->_i2c_waitForIdle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                26    21      5   13137
                                             20 COMRAM    26    21      5
                 _I2C_Write_Register
                           _LCDClear
                            _LCDGoto
                            _LCDInit
                       _LCDWriteHexa
                        _LCDWriteStr
                            _i2c_ACK
                            _i2c_NAK
                           _i2c_init
                           _i2c_read
                       _i2c_repStart
                          _i2c_start
                           _i2c_stop
                          _i2c_write
                             _strcpy
 ---------------------------------------------------------------------------------
 (1) _strcpy                                               4     2      2     225
                                              0 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (1) _i2c_repStart                                         0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_read                                             1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_NAK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _i2c_ACK                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LCDWriteHexa                                         9     7      2    5066
                                             11 COMRAM     9     7      2
                            _LCDGoto
                        _LCDWriteStr
 ---------------------------------------------------------------------------------
 (1) _LCDWriteStr                                          5     3      2    2267
                                              6 COMRAM     5     3      2
                         _LCDPutChar
 ---------------------------------------------------------------------------------
 (2) _LCDPutChar                                           1     1      0    1721
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (2) _LCDGoto                                              6     5      1    2289
                                              5 COMRAM     6     5      1
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    1307
                                              3 COMRAM     1     1      0
                            _WaitLCD
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (1) _LCDClear                                             1     1      0    1699
                                              5 COMRAM     1     1      0
                            _WaitLCD
                          _WriteByte
 ---------------------------------------------------------------------------------
 (3) _WriteByte                                            2     1      1    1652
                                              3 COMRAM     2     1      1
                        _WriteNibble
 ---------------------------------------------------------------------------------
 (4) _WriteNibble                                          3     2      1    1260
                                              0 COMRAM     3     2      1
 ---------------------------------------------------------------------------------
 (3) _WaitLCD                                              1     1      0      47
                                              1 COMRAM     1     1      0
                           _ReadByte
 ---------------------------------------------------------------------------------
 (4) _ReadByte                                             1     1      0      24
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Write_Register                                   3     1      2     157
                                              2 COMRAM     3     1      2
                          _i2c_start
                           _i2c_stop
                          _i2c_write
 ---------------------------------------------------------------------------------
 (1) _i2c_write                                            1     1      0      15
                                              1 COMRAM     1     1      0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (1) _i2c_stop                                             0     0      0       0
                    _i2c_waitForIdle
 ---------------------------------------------------------------------------------
 (2) _i2c_waitForIdle                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _i2c_start                                            0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _I2C_Write_Register
     _i2c_start
     _i2c_stop
       _i2c_waitForIdle
     _i2c_write
       _i2c_waitForIdle
   _LCDClear
     _WaitLCD
       _ReadByte
     _WriteByte
       _WriteNibble
   _LCDGoto
     _WaitLCD
     _WriteByte
   _LCDInit
     _WaitLCD
     _WriteNibble
   _LCDWriteHexa
     _LCDGoto
     _LCDWriteStr
       _LCDPutChar
         _WaitLCD
         _WriteByte
   _LCDWriteStr
   _i2c_ACK
   _i2c_NAK
   _i2c_init
   _i2c_read
     _i2c_waitForIdle
   _i2c_repStart
     _i2c_waitForIdle
   _i2c_start
   _i2c_stop
   _i2c_write
   _strcpy

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F37      0       0      46        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            A0      0       0       4        0.0%
BANK0               A0      0       0       5        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F     2E      30       1       50.5%
BITBIGSFRlhll       48      0       0      43        0.0%
BITBANK15           38      0       0      34        0.0%
BANK15              38      0       0      35        0.0%
BITBIGSFRhhhh       34      0       0      36        0.0%
BITBIGSFRhlhh       23      0       0      38        0.0%
BITBIGSFRlhlh        8      0       0      42        0.0%
BITBIGSFRhll         8      0       0      40        0.0%
BITBIGSFRlhh         7      0       0      41        0.0%
BITBIGSFRhlhl        2      0       0      39        0.0%
BITBIGSFRll          2      0       0      44        0.0%
BITBIGSFRhhhl        1      0       0      37        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR_1             0      0       0     200        0.0%
SFR_1                0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      30      45        0.0%
DATA                 0      0      30       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Jun 14 15:24:30 2024

                        l41 15B4                          l50 1566                          l35 146C  
               ?_LCDPutChar 0001                          l44 154E                          l53 1574  
                        l29 13DE                          l38 15A6                          l62 157C  
                        l70 14CA                          l71 14D2                          l47 155C  
                        l56 1592                          l65 158A                          l74 151C  
                        l59 15A0                          l92 1440                          l68 14BC  
                        l77 152A                          l96 150C                          l97 150E  
                        u40 1454                          u41 144C                          u50 146C  
                        u51 1468                          u60 15B4                          u61 15B0  
                        u70 1574                          u71 1570                          u48 1456  
                        u80 152A                          u81 1526                         l100 13A2  
                       l103 1544                         l106 1216                         l122 15C6  
                       l115 12FC                         l131 1292                         l109 14F2  
                       l134 1356                         l179 1490                         l923 1442  
                       l931 155E                         l925 1442                         l933 1562  
                       l941 1518                         l935 1564                         l929 15A2  
                       l937 1512                         l939 1516                         l971 13B4  
                       l981 13C2                         l973 13B6                         l965 13A4  
                       l869 1410                         l991 13CC                         l983 13C4  
                       l975 13BC                         l967 13AE                         l985 13C6  
                       l977 13BE                         l969 13B2                         l993 1546  
                       l987 13C8                         l979 13C0                         l995 154A  
                       l989 13CA                         l997 154C                         l999 158C  
                       u210 136E                         u211 1366                         u300 1410  
                       u301 140C                         u230 150C                         u150 155C  
                       u231 1508                         u151 1558                         u240 12A6  
                       u160 15A0                         u241 12A2                         u161 159C  
                       u250 12B6                         u170 158A                         u251 12B2  
                       u171 1586                         u228 1370                         u260 12CA  
                       u180 14CA                         u261 12C6                         u181 14C6  
                       u270 124E                         u327 105C                         u280 1282  
                       u337 10A6                         u290 1292                         u291 128E  
                       u347 111E                         u357 1148                         u277 1244  
                       u367 1162                         u287 1278                         u377 1178  
                       u387 118A                         u397 14E4                         wreg 0FE8  
           __end_of_LCDInit 1218             __end_of_LCDGoto 12FE                ?_LCDWriteStr 0007  
                      l1001 1576                        l1011 14D0                        l1003 14B4  
                      l1005 14B4                        l1007 14B8                        l1201 143C  
                      l1009 14BA                        l1203 143E                        l1211 137E  
                      l1221 139E                        l1213 1380                        l1301 1212  
                      l1223 13A0                        l1215 1388                        l1207 135A  
                      l1231 152E                        l1303 14D4                        l1311 1304  
                      l1321 1470                        l1225 14F4                        l1217 138A  
                      l1209 137C                        l1305 14DE                        l1241 12CA  
                      l1233 15B8                        l1313 1322                        l1401 10C4  
                      l1331 148C                        l1323 1474                        l1227 14F8  
                      l1219 139C                        l1307 14EE                        l1243 12DE  
                      l1235 1296                        l1251 1220                        l1315 133E  
                      l1411 10DE                        l1403 10CA                        l1325 147A  
                      l1181 1412                        l1229 14FE                        l1261 1152  
                      l1245 12EE                        l1237 12A6                        l1253 1252  
                      l1317 1342                        l1309 1300                        l1333 13E0  
                      l1421 1118                        l1413 10E2                        l1405 10D0  
                      l1327 1480                        l1191 142C                        l1183 1420  
                      l1271 119A                        l1263 115C                        l1247 12F8  
                      l1239 12BA                        l1255 1254                        l1319 134C  
                      l1335 13E4                        l1415 10F0                        l1407 10D4  
                      l1329 1486                        l1193 1434                        l1185 1426  
                      l1281 11C0                        l1273 119E                        l1265 1176  
                      l1257 1130                        l1249 1218                        l1417 10FE  
                      l1409 10DA                        l1195 1436                        l1187 1428  
                      l1291 11E6                        l1283 11CA                        l1275 11A8  
                      l1267 117E                        l1259 1142                        l1419 1108  
                      l1371 1044                        l1197 1438                        l1189 142A  
                      l1293 11F0                        l1285 11CE                        l1277 11B2  
                      l1269 1190                        l1381 107C                        l1373 1048  
                      l1199 143A                        l1295 11FA                        l1287 11D8  
                      l1279 11B6                        l1391 10A0                        l1383 1086  
                      l1375 1056                        l1367 1034                        l1297 11FE  
                      l1289 11E2                        l1393 10B0                        l1385 1086  
                      l1377 1066                        l1369 103C                        l1299 1208  
                      l1395 10B4                        l1387 1086                        l1379 1070  
                      l1397 10BA                        l1389 1090                        l1399 10C0  
                      STR_1 1001                        STR_2 1028                        STR_3 101D  
                      STR_4 1012                        _LATD 0F8C                        _main 1034  
                      fsr0h 0FEA                        indf0 0FEF                        fsr2h 0FDA  
                      fsr0l 0FE9                        indf2 0FDF                        fsr2l 0FD9  
         ??_i2c_waitForIdle 0001                        start 0000               ?_i2c_repStart 0001  
           __end_of_i2c_ACK 15A2             __end_of_i2c_NAK 158C                ___param_bank 0000  
          __end_of_LCDClear 14F4             __end_of_WaitLCD 1510               ?_LCDWriteHexa 000C  
                     ?_main 0015                       _PORTD 0F83                       tablat 0FF5  
                     status 0FD8               WaitLCD@status 0002              ??_i2c_repStart 0002  
           __initialization 1492                __end_of_main 1130              ??_LCDWriteHexa 000E  
          __end_of_i2c_init 13E0            __end_of_i2c_read 14D4            __end_of_ReadByte 1442  
          __end_of_i2c_stop 1576                      ??_main 001A               __activetblptr 0002  
                 ??_LCDInit 0004                   ??_LCDGoto 0007               LCDGoto@column 000B  
                 ??_i2c_ACK 0001                   ??_i2c_NAK 0001                   ??_WaitLCD 0002  
                    isa$std 0001                      _strcpy 13E0       i2c_write@i2cWriteData 0002  
              __pdataCOMRAM 002F                __mediumconst 0000                      tblptrh 0FF7  
              LCDWriteStr@i 000B                      tblptrl 0FF6                      tblptru 0FF8  
                 ?_LCDClear 0001                  __accesstop 0060     __end_of__initialization 14AA  
             ___rparam_used 0001              __pcstackCOMRAM 0001              WriteNibble@cmd 0003  
              ??_LCDPutChar 0006           __end_of_i2c_start 15B6           __end_of_i2c_write 152C  
      __end_of_i2c_repStart 155E             _i2c_waitForIdle 1442         i2c_read@i2cReadData 0002  
      __end_of_LCDWriteHexa 1358                WriteByte@cmd 0005                  ??_LCDClear 0006  
                 ?_i2c_init 0001                   ?_i2c_read 0001                   ?_ReadByte 0001  
                 ?_i2c_stop 0001          __end_of_LCDPutChar 15C8           LCDWriteHexa@value 000D  
             ??_WriteNibble 0002                     ?_strcpy 0001           __end_of_WriteByte 1546  
                   _LCDInit 1130                     _LCDGoto 1294                     _SSP1ADD 0FC8  
                   _SSP1BUF 0FC9                  ??_i2c_init 0001                  ??_i2c_read 0002  
                ??_ReadByte 0001                  ??_i2c_stop 0002                     _i2c_ACK 158C  
                   _i2c_NAK 1576                     __Hparam 0000                     _WaitLCD 14F4  
                   __Lparam 0000                __psmallconst 1000                     __pcinit 1492  
__end_of_I2C_Write_Register 1492                     __ramtop 1000     __end_of_i2c_waitForIdle 146E  
                   __ptext0 1034                     __ptext1 13E0                     __ptext2 1546  
                   __ptext3 14B4                     __ptext4 13A4                     __ptext5 1576  
                   __ptext6 158C                     __ptext7 12FE                     __ptext8 1218  
                   __ptext9 15B6         __end_of_WriteNibble 13A4        end_of_initialization 14AA  
             __Lmediumconst 0000           LCDWriteStr@string 0007                     strcpy@d 0004  
     I2C_Write_Register@reg 0005                   _TRISCbits 0F94                   _TRISDbits 0F95  
                LCDGoto@row 0006                  main@string 001B                _i2c_repStart 1546  
           WriteNibble@data 0001                 _WriteNibble 1358                _LCDWriteHexa 12FE  
             __pidataCOMRAM 15C8            ?_i2c_waitForIdle 0001              __end_of_strcpy 1412  
       start_initialization 1492                   _i2c_start 15A2                   _i2c_write 1510  
             ??_LCDWriteStr 0009                    ??_strcpy 0003                    ?_LCDInit 0001  
                  ?_LCDGoto 0006               WriteByte@data 0004                  ?_i2c_start 0001  
                ?_i2c_write 0001                   _WriteByte 152C              LCDPutChar@data 0006  
        LCDWriteHexa@column 0010          LCDWriteHexa@string 0011                    ?_i2c_ACK 0001  
                  ?_i2c_NAK 0001         __end_of_LCDWriteStr 1294            LCDWriteHexa@hexa 0014  
                  ?_WaitLCD 0001                 __smallconst 1000                  ?_WriteByte 0004  
        _I2C_Write_Register 146E                    _LCDClear 14D4                    _LATDbits 0F8C  
       ?_I2C_Write_Register 0003                 _LCDGoto$623 0009                    _PIR1bits 0F9E  
                  _PIR2bits 0FA1                   main@F6555 002F                    _SSP1CON1 0FC6  
                  _SSP1CON2 0FC5                    _SSP1STAT 0FC7        ??_I2C_Write_Register 0005  
                 main@degre 002B                   main@temp2 002E                 ??_i2c_start 0001  
               ??_i2c_write 0002                 _LCDWriteStr 1218                    _i2c_init 13A4  
                  _i2c_read 14B4                    _ReadByte 1412                    _i2c_stop 155E  
                  __Hrparam 0000                    __Lrparam 0000                ?_WriteNibble 0001  
                _ANSELCbits 0F3A             LCDWriteHexa@row 000C                 ??_WriteByte 0005  
                  __ptext10 1294                    __ptext11 1130                    __ptext20 1442  
                  __ptext12 14D4                    __ptext21 15A2                    __ptext13 152C  
                  __ptext14 1358                    __ptext15 14F4                    __ptext16 1412  
                  __ptext17 146E                    __ptext18 1510                    __ptext19 155E  
              _SSP1CON2bits 0FC5                _SSP1CON3bits 0FCB                  strcpy@dest 0001  
                  isa$xinst 0000              ReadByte@status 0001                  _LCDPutChar 15B6  
                  main@argc 0015                    main@argv 0017                _SSP1STATbits 0FC7  
                  main@temp 002D                   strcpy@src 0002     I2C_Write_Register@value 0003  
